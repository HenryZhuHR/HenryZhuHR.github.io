import{_ as n,o as s,c as a,a as t}from"./app.b44005e2.js";const p={},e=t(`<h1 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h1><h2 id="stl-\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#stl-\u4ECB\u7ECD" aria-hidden="true">#</a> STL \u4ECB\u7ECD</h2><p>\u6807\u51C6\u6A21\u677F\u5E93 (Standard Template Library, STL) \u662F C++ \u6807\u51C6\u7A0B\u5E8F\u5E93\u7684\u4E00\u90E8\u5206\uFF0C\u5B83\u5305\u542B\u4E86\u516D\u4E2A\u90E8\u4EF6\u4E3A\u7A0B\u5E8F\u5458\u63D0\u4F9B\u4E86\u4E00\u79CD\u9AD8\u6548\u7684 C++ \u6A21\u677F\u7F16\u7A0B\u65B9\u6CD5\uFF0C\u5305\u62EC\uFF1A</p><ul><li>\u5BB9\u5668 (Containers)</li><li>\u8FED\u4EE3\u5668 (Iterators)</li><li>\u7B97\u6CD5 (Algorithms)</li><li>\u9002\u914D\u5668 (Adapters)</li><li>\u5206\u914D\u5668 (Allocators)</li><li>\u4EFF\u51FD\u6570 (Functors)</li></ul><h2 id="stl-\u5BB9\u5668" tabindex="-1"><a class="header-anchor" href="#stl-\u5BB9\u5668" aria-hidden="true">#</a> STL \u5BB9\u5668</h2><h2 id="stl-\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#stl-\u8FED\u4EE3\u5668" aria-hidden="true">#</a> STL \u8FED\u4EE3\u5668</h2><p>STL \u8FED\u4EE3\u5668\u662F\u4E00\u79CD\u6CDB\u578B\u6307\u9488\uFF0C\u5B83\u4F7F\u5F97\u5BB9\u5668\u548C\u7B97\u6CD5\u80FD\u591F\u72EC\u7ACB\u4E8E\u5F7C\u6B64\u5DE5\u4F5C\u3002\u8FED\u4EE3\u5668\u662F\u4E00\u79CD\u62BD\u8C61\u7684\u8BBE\u8BA1\u6A21\u5F0F\uFF0C\u5B83\u5C06\u5BB9\u5668\u548C\u7B97\u6CD5\u5206\u5F00\uFF0C\u4ECE\u800C\u80FD\u591F\u63D0\u4F9B\u4E00\u79CD\u66F4\u52A0\u7075\u6D3B\u7684\u7A0B\u5E8F\u8BBE\u8BA1\u673A\u5236\u3002</p><p>\u8FED\u4EE3\u5668\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u53EF\u4EE5\u5FAA\u73AF\u8BBF\u95EE C++ \u6807\u51C6\u5E93\u5BB9\u5668\u4E2D\u7684\u5143\u7D20\uFF0C\u5E76\u63D0\u4F9B\u5BF9\u5404\u4E2A\u5143\u7D20\u7684\u8BBF\u95EE\u3002 C++ \u6807\u51C6\u5E93\u5BB9\u5668\u5168\u90FD\u63D0\u4F9B\u8FED\u4EE3\u5668\uFF0C\u4EE5\u4FBF\u7B97\u6CD5\u53EF\u4EE5\u91C7\u7528\u6807\u51C6\u65B9\u5F0F\u8BBF\u95EE\u5176\u5143\u7D20\uFF0C\u800C\u4E0D\u5FC5\u8003\u8651\u7528\u4E8E\u5B58\u50A8\u5143\u7D20\u7684\u5BB9\u5668\u7C7B\u578B\u3002</p><p>\u5305\u62EC\u5982\u4E0B\u51E0\u79CD\u8FED\u4EE3\u5668\uFF1A</p><ul><li><a href="#%E8%BE%93%E5%85%A5%E8%BF%AD%E4%BB%A3%E5%99%A8">\u8F93\u5165\u8FED\u4EE3\u5668 (Input Iterators)</a>: <strong>\u53EA\u8BFB</strong>\u8BBF\u95EE\uFF0C\u53EA\u80FD\u5355\u6B65\u5411\u524D\u8FED\u4EE3\uFF08\u610F\u601D\u5C31\u662F\u81EA\u589E\uFF09</li><li><a href="#%E8%BE%93%E5%87%BA%E8%BF%AD%E4%BB%A3%E5%99%A8">\u8F93\u51FA\u8FED\u4EE3\u5668 (Output Iterators)</a>: <strong>\u53EA\u5199</strong>\u8BBF\u95EE\uFF0C\u53EA\u80FD\u5355\u6B65\u5411\u524D\u8FED\u4EE3</li><li><a href="#%E5%89%8D%E5%90%91%E8%BF%AD%E4%BB%A3%E5%99%A8">\u524D\u5411\u8FED\u4EE3\u5668 (Forward Iterators)</a>: <strong>\u8BFB\u5199</strong>\u8BBF\u95EE\uFF0C\u652F\u6301\u5355\u5411\u8FED\u4EE3</li><li><a href="#%E5%8F%8C%E5%90%91%E8%BF%AD%E4%BB%A3%E5%99%A8">\u53CC\u5411\u8FED\u4EE3\u5668 (Bidirectional Iterators)</a>: \u53CC\u5411<strong>\u8BFB\u5199</strong>\u8BBF\u95EE\uFF0C\u652F\u6301\u53CC\u5411\u8FED\u4EE3</li><li><a href="#%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E8%BF%AD%E4%BB%A3%E5%99%A8">\u968F\u673A\u8BBF\u95EE\u8FED\u4EE3\u5668 (Random Access Iterators)</a>: \u652F\u6301 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> \u65F6\u95F4\u590D\u6742\u5EA6\u5BF9\u5143\u7D20\u7684\u968F\u673A\u4F4D\u7F6E\u8BBF\u95EE\uFF0C\u652F\u6301\u5BF9\u5143\u7D20\u7684\u8BFB\u53D6\u3002\u652F\u6301\u5B8C\u6574\u7684\u8FED\u4EE3\u5668\u7B97\u672F\u8FD0\u7B97\uFF0C\u4F8B\u5982\u4E0B\u6807\u64CD\u4F5C <code>iter[n]</code>(<code>*(iter+n)</code>) \u548C <code>iter+=n</code></li></ul><p>\u8FED\u4EE3\u5668\u7684\u5B9A\u4E49\u548C\u7EE7\u627F\u5173\u7CFB\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u8F93\u5165\u8FED\u4EE3\u5668</span>
<span class="token keyword">struct</span> <span class="token class-name">input_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u8F93\u51FA\u8FED\u4EE3\u5668</span>
<span class="token keyword">struct</span> <span class="token class-name">output_iterator_tag</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u524D\u5411\u8FED\u4EE3\u5668</span>
<span class="token keyword">struct</span> <span class="token class-name">forward_iterator_tag</span>       <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">input_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u53CC\u5411\u8FED\u4EE3\u5668</span>
<span class="token keyword">struct</span> <span class="token class-name">bidirectional_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">forward_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// \u968F\u673A\u8BBF\u95EE\u8FED\u4EE3\u5668</span>
<span class="token keyword">struct</span> <span class="token class-name">random_access_iterator_tag</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">bidirectional_iterator_tag</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>/Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__iterator/iterator_traits.h</code></p></blockquote><h3 id="\u8F93\u5165\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u8F93\u5165\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u8F93\u5165\u8FED\u4EE3\u5668</h3><p>\u8F93\u5165\u8FED\u4EE3\u5668 <code>X</code> \u53EF\u4F7F\u7528 <code>++</code> \u8FD0\u7B97\u7B26<strong>\u5411\u524D</strong>\u5FAA\u73AF\u8BBF\u95EE\u5E8F\u5217\uFF0C\u53EF\u4F7F\u7528 <code>*</code> \u8FD0\u7B97\u7B26\u8BFB\u53D6\u5143\u7D20\u4EFB\u610F\u6B21\u6570\u3002 \u53EF\u4F7F\u7528 <code>==</code> \u548C <code>!=</code> \u8FD0\u7B97\u7B26\u6765\u6BD4\u8F83\u8F93\u5165\u8FED\u4EE3\u5668\u3002 \u9012\u589E\u8F93\u5165\u8FED\u4EE3\u5668\u7684\u4EFB\u4F55\u526F\u672C\u540E\uFF0C\u65E0\u6CD5\u5B89\u5168\u5730\u6BD4\u8F83\u3001\u53D6\u6D88\u5F15\u7528\u6216\u9012\u589E\u5176\u4ED6\u4EFB\u4F55\u526F\u672C\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728 <code>vector</code> \u4E2D\uFF0C\u8F93\u5165\u8FED\u4EE3\u5668\u80FD\u8FDB\u884C \u590D\u5236\u6784\u9020\u3001\u8D4B\u503C\u3001\u63D2\u5165\u51E0\u4E2A\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u8F93\u5165\u8FED\u4EE3\u5668\u80FD\u8FDB\u884C\u5355\u5411\u8FED\u4EE3\uFF0C\u6240\u4EE5\u80FD\u591F\u8FDB\u884C\u63D2\u5165\u64CD\u4F5C\uFF0C\u4F46\u662F\u4E0D\u80FD\u8FDB\u884C\u5220\u9664\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u5220\u9664\u64CD\u4F5C\u9700\u8981\u53CC\u5411\u8FED\u4EE3\u5668\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">vector</span><span class="token punctuation">{</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        <span class="token function">vector</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F8B\u5982\u8D4B\u503C\u6784\u9020\u4E2D\uFF0C\u7528\u4E8E\u5355\u5411\u8FED\u4EE3\u7684 <code>first</code> \u548C <code>last</code> \u4E24\u4E2A\u8FED\u4EE3\u5668\uFF0C\u7528\u4E8E\u6307\u5B9A\u8D4B\u503C\u7684\u8303\u56F4\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">vector</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> _Allocator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">assign</span><span class="token punctuation">(</span>_InputIterator __first<span class="token punctuation">,</span> _InputIterator __last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __first <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__first<span class="token punctuation">)</span>
        <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>__first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8F93\u51FA\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u8F93\u51FA\u8FED\u4EE3\u5668</h3><p>\u8F93\u51FA\u8FED\u4EE3\u5668\u53EF\u4EE5\u4FEE\u6539\u5143\u7D20\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5185\u90E8\u7ED3\u6784\u7684\u8C03\u6574\uFF0C\u8FDB\u800C\u5BFC\u81F4\u539F\u6709\u7684\u8FED\u4EE3\u5668\u5931\u6548\uFF01\u53EF\u80FD\u7684\u60C5\u51B5\u6709\uFF1A</p><ul><li>\u7ED3\u6784\u548C\u5143\u7D20\u987A\u5E8F\u53D8\u66F4\uFF1A\u6BD4\u5982\u5BF9map\uFF0Cset\uFF0Cpriority_queue\u63D2\u5165\u5143\u7D20\uFF1B</li><li>\u5185\u5B58\u53D8\u5316\uFF1A\u6BD4\u5982\u5BF9vector\u63D2\u5165\u5143\u7D20\uFF0C\u53EF\u80FD\u5BFC\u81F4\u91CD\u65B0\u7533\u8BF7\u5185\u5B58\u5E76\u62F7\u8D1D\uFF01</li></ul><h3 id="\u524D\u5411\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u524D\u5411\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u524D\u5411\u8FED\u4EE3\u5668</h3><p>\u524D\u5411\u8FED\u4EE3\u5668\u53EF\u4EE5\u8BFB\u5199\u5143\u7D20\uFF0C\u4F46\u662F\u53EA\u80FD\u5355\u5411\u8FED\u4EE3\uFF0C\u5373\u53EA\u80FD\u81EA\u589E\uFF0C\u4E0D\u80FD\u81EA\u51CF\u3002</p><h3 id="vector-\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#vector-\u8FED\u4EE3\u5668" aria-hidden="true">#</a> vector \u8FED\u4EE3\u5668</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">vector</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> T                                        value_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> Allocator                                allocator_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>reference       reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>const_reference const_reference<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> implementation<span class="token operator">-</span>defined                   iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> implementation<span class="token operator">-</span>defined                   const_iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>size_type       size_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>difference_type difference_type<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>pointer         pointer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">allocator_type</span><span class="token double-colon punctuation">::</span>const_pointer   const_pointer<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>iterator<span class="token operator">&gt;</span>          reverse_iterator<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>reverse_iterator<span class="token operator">&lt;</span>const_iterator<span class="token operator">&gt;</span>    const_reverse_iterator<span class="token punctuation">;</span>

    <span class="token function">vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">noexcept</span><span class="token punctuation">(</span>is_nothrow_default_constructible<span class="token operator">&lt;</span>allocator_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">vector</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">vector</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C++14</span>
    <span class="token function">vector</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        <span class="token function">vector</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> <span class="token operator">=</span> <span class="token function">allocator_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vector</span><span class="token punctuation">(</span>vector<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span>
        <span class="token keyword">noexcept</span><span class="token punctuation">(</span>is_nothrow_move_constructible<span class="token operator">&lt;</span>allocator_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vector</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> il<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vector</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> il<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>vector<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span>
        <span class="token keyword">noexcept</span><span class="token punctuation">(</span>
             allocator_type<span class="token double-colon punctuation">::</span>propagate_on_container_move_assignment<span class="token double-colon punctuation">::</span>value <span class="token operator">||</span>
             allocator_type<span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C++17</span>
    vector<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> il<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> il<span class="token punctuation">)</span><span class="token punctuation">;</span>

    allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    iterator               <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_iterator         <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    iterator               <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_iterator         <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    reverse_iterator       <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    reverse_iterator       <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    const_iterator         <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_iterator         <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_reverse_iterator <span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    const_reverse_iterator <span class="token function">crend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    size_type <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    reference       <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    const_reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    reference       <span class="token function">at</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    const_reference <span class="token function">at</span><span class="token punctuation">(</span>size_type n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    reference       <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    reference       <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    value_type<span class="token operator">*</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value_type<span class="token operator">*</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>value_type<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
        reference <span class="token function">emplace_back</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reference in C++17</span>
    <span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span> iterator <span class="token function">emplace</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> size_type n<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIterator</span><span class="token operator">&gt;</span>
        iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> InputIterator first<span class="token punctuation">,</span> InputIterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">,</span> initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">&gt;</span> il<span class="token punctuation">)</span><span class="token punctuation">;</span>

    iterator <span class="token function">erase</span><span class="token punctuation">(</span>const_iterator position<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterator <span class="token function">erase</span><span class="token punctuation">(</span>const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_type sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_type sz<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>vector<span class="token operator">&amp;</span><span class="token punctuation">)</span>
        <span class="token keyword">noexcept</span><span class="token punctuation">(</span>allocator_traits<span class="token operator">&lt;</span>allocator_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>propagate_on_container_swap<span class="token double-colon punctuation">::</span>value <span class="token operator">||</span>
                 allocator_traits<span class="token operator">&lt;</span>allocator_type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// C++17</span>

    <span class="token keyword">bool</span> <span class="token function">__invariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2><ul><li>[1]<a href="https://en.cppreference.com/w/" target="_blank" rel="noopener noreferrer">cppreference</a></li></ul>`,29),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","stl.html.vue"]]);export{r as default};
