import{_ as n,o as s,c as a,a as p}from"./app.2f7bd735.js";var t="/assets/combine.cbdd7d46.svg";const e={},o=p('<h1 id="\u56DE\u6EAF\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF\u7B97\u6CD5" aria-hidden="true">#</a> \u56DE\u6EAF\u7B97\u6CD5</h1><p>\u56DE\u6EAF\u7B97\u6CD5\u548C\u526A\u679D</p><h2 id="\u56DE\u6EAF\u7B97\u6CD5\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF\u7B97\u6CD5\u601D\u8DEF" aria-hidden="true">#</a> \u56DE\u6EAF\u7B97\u6CD5\u601D\u8DEF</h2><h2 id="\u7EC4\u5408\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u95EE\u9898" aria-hidden="true">#</a> \u7EC4\u5408\u95EE\u9898</h2><p>\u5178\u578B\u7684 <a href="https://leetcode.cn/problems/combinations/" target="_blank" rel="noopener noreferrer">77.\u7EC4\u5408\u95EE\u9898</a>\uFF0C\u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6C42\u51FA\u6240\u6709\u7684\u7EC4\u5408\u3002\u4F8B\u5982\uFF0C\u6C42 <code>[1, n]</code> \u4E2D\u6240\u6709\u53EF\u80FD\u7684 <code>k</code> \u4E2A\u6570\u7684\u7EC4\u5408</p><p><img src="'+t+`" alt="combine"></p><p>\u56DE\u6EAF\u6CD5\u7684\u641C\u7D22\u8FC7\u7A0B\u5C31\u662F\u4E00\u4E2A\u6811\u578B\u7ED3\u6784\u7684\u904D\u5386\u8FC7\u7A0B\uFF0C\u5982\u56FE\u53EF\u4EE5\u770B\u51FA <code>for</code> \u5FAA\u73AF\u7528\u6765<strong>\u6A2A\u5411\u904D\u5386</strong>\uFF0C\u9012\u5F52\u7684\u8FC7\u7A0B\u662F<strong>\u7EB5\u5411\u904D\u5386</strong>\u3002\u6811\u6BCF\u5411\u4E0B\u4E00\u5C42\uFF0C\u5C31\u662F\u53D6\u51FA\u4E00\u4E2A\u6570\u5B57</p><p>\u56DE\u6EAF\u7B97\u6CD5\u4F2A\u4EE3\u7801</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>\u5168\u5C40\u53D8\u91CF\uFF0C\u5B58\u653E\u7ED3\u679C\u548C\u4E2D\u95F4\u8DEF\u5F84
<span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>\u53C2\u6570<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>\u7EC8\u6B62\u6761\u4EF6<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9047\u5230\u53F6\u5B50\u8282\u70B9</span>
        \u5B58\u653E\u7ED3\u679C<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>\u9009\u62E9\uFF1A\u672C\u5C42\u96C6\u5408\u4E2D\u5143\u7D20\uFF08\u6811\u4E2D\u8282\u70B9\u5B69\u5B50\u7684\u6570\u91CF\u5C31\u662F\u96C6\u5408\u7684\u5927\u5C0F\uFF09<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        \u5904\u7406\u8282\u70B9<span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>\u8DEF\u5F84\uFF0C\u9009\u62E9\u5217\u8868<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52</span>
        \u56DE\u6EAF\uFF0C\u64A4\u9500\u5904\u7406\u7ED3\u679C
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">/**
 * \u5B9E\u9645\u4E0A\u89E3\u51B3 C_n_k \u7684\u95EE\u9898
 * \u6BCF\u6B21\u6811\u6DF1\u5EA6+1 \u83B7\u53D6\u7684\u6570+1 \u6BCF\u6B21\u53D61\u4E2A\u6570 \u6DF1\u5EA6\u4F18\u5148 DFS
 */</span>
vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> result<span class="token punctuation">;</span> <span class="token comment">// \u5B58\u653E\u7ED3\u679C</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> path<span class="token punctuation">;</span>           <span class="token comment">// \u5B58\u653E\u4E2D\u95F4\u8DEF\u5F84</span>

    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> backtracking <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// \u9047\u5230\u53F6\u5B50\u8282\u70B9\uFF0C\u4E2A\u6570\u6EE1\u8DB3\u8981\u6C42</span>
            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5904\u7406\u8282\u70B9</span>
            <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52</span>
            <span class="token comment">// [\u56DE\u6EAF\u6838\u5FC3] \u64A4\u9500\u672C\u6B21\u64CD\u4F5C\uFF0C\u7528\u4E8E\u4E0B\u4E00\u6B21\u7684\u904D\u5386\uFF0C\u4E0D\u7136\u6570\u7EC4\u4F1A\u91CD\u590D</span>
            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u526A\u679D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> backtracking <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u526A\u679D: \u5982\u679C\u5F53\u524D\u8DEF\u5F84\u4E0A\u7684\u6570\u5B57\u4E2A\u6570\u52A0\u4E0A\u540E\u9762\u7684\u6570\u5B57\u4E2A\u6570\u5C0F\u4E8E k\uFF0C\u4E0D\u53EF\u80FD\u6784\u9020\u51FA\u957F\u5EA6\u4E3A k \u7684\u6570\u5B57\u7EC4\u5408</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">-</span> start_id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u65F6\u95F4\u590D\u6742\u5EA6: <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: \u6BCF\u4E00\u4E2A\u5143\u7D20\u7684\u72B6\u6001\u65E0\u5916\u4E4E\u53D6\u4E0E\u4E0D\u53D6\uFF0C\u4E00\u5171 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> \u79CD\u72B6\u6001\uFF0C\u6BCF\u79CD\u72B6\u6001\u90FD\u9700\u8981 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> \u7684\u6784\u9020\u65F6\u95F4</li><li>\u7A7A\u95F4\u590D\u6742\u5EA6: <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>: \u9012\u5F52\u6DF1\u5EA6\u4E3A <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>\uFF0C\u6240\u4EE5\u7CFB\u7EDF\u6808\u6240\u7528\u7A7A\u95F4\u4E3A <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> \u3002</li></ul><p>\u7279\u522B\u5730\uFF0C\u4E0A\u9762\u7684\u4F8B\u5B50\u662F\u5728\u6570\u7EC4\u6709\u5E8F\u7684\u60C5\u51B5\u4E0B\uFF0C\u5982\u679C\u6570\u7EC4\u65E0\u5E8F\uFF0C\u8FD8\u8981\u6C42\u51FA\u6240\u6709\u4E0D\u91CD\u590D\u7684\u7EC4\u5408\uFF0C\u90A3\u4E48\u5FC5\u987B\u8981\u6392\u5E8F\u3002\u4F8B\u5982 <a href="https://leetcode.cn/problems/combination-sum-ii/description/" target="_blank" rel="noopener noreferrer">40. \u7EC4\u5408\u603B\u548C II</a></p><p>\u7ECF\u5178\u7684 N \u7687\u540E\u95EE\u9898\uFF0C\u7ED9\u5B9A\u4E00\u4E2A <code>n*n</code> \u7684\u68CB\u76D8\uFF0C\u653E\u7F6E <code>n</code> \u4E2A\u7687\u540E\uFF0C\u4F7F\u5F97\u7687\u540E\u4E4B\u95F4\u4E0D\u80FD\u4E92\u76F8\u653B\u51FB\uFF0C\u6C42\u6240\u6709\u7684\u89E3\u6CD5</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span>   res<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>           <span class="token function">chessboard</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> backtracking <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//  i \u8868\u793A\u5F53\u524D\u5904\u7406\u7684\u884C\u6570</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// \u9012\u5F52\u8D85\u8FC7\u68CB\u76D8\u7684\u6700\u540E\u4E00\u884C\uFF0C\u8BF4\u660E\u627E\u5230\u4E86\u4E00\u79CD\u89E3\u6CD5</span>
            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> isValid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _i <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> _i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u68C0\u67E5\u5F53\u524D\u5217</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>               
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _i <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> _i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u68C0\u67E545\u5BF9\u89D2\u7EBF</span>
                    <span class="token keyword">auto</span> _j <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">-</span> _i<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>                
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> _i <span class="token operator">=</span> i<span class="token punctuation">,</span> _j <span class="token operator">=</span> j<span class="token punctuation">;</span> _i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _j <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> _i<span class="token operator">--</span><span class="token punctuation">,</span> _j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u68C0\u67E5 135 \u5BF9\u89D2\u7EBF</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>chessboard<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u68C0\u67E5\u5F53\u524D\u70B9\u662F\u5426\u662F\u53EF\u4EE5\u653E\u7F6E\u7687\u540E\u7684</span>
                chessboard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u5904\u7406</span>
                <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// \u56DE\u6EAF</span>
                chessboard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u64A4\u9500</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[o];function l(i,u){return s(),a("div",null,c)}var k=n(e,[["render",l],["__file","backtracking.html.vue"]]);export{k as default};
