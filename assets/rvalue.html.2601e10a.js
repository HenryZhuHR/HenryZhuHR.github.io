import{_ as n,o as s,c as a,a as p}from"./app.c3baaf16.js";var t="/assets/value.65b7a01b.svg";const e={},o=p('<h1 id="\u4E00\u5207\u4E3A\u4E86\u51CF\u5C11\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u4E00\u5207\u4E3A\u4E86\u51CF\u5C11\u62F7\u8D1D" aria-hidden="true">#</a> \u4E00\u5207\u4E3A\u4E86\u51CF\u5C11\u62F7\u8D1D</h1><p>C++ 11 \u4E2D\u5F15\u5165\u4E86\u53F3\u503C\u5F15\u7528\u3001\u79FB\u52A8\u8BED\u4E49\u3001\u4E07\u80FD\u5F15\u7528\u3001\u5F15\u7528\u6298\u53E0\u3001\u5B8C\u7F8E\u8F6C\u53D1\u7B49\u65B0\u7279\u6027\uFF0C\u8FD9\u4E9B\u7279\u6027\u7684\u51FA\u73B0\u90FD\u662F\u4E3A\u4E86\u51CF\u5C11\u62F7\u8D1D\u64CD\u4F5C\uFF0C\u63D0\u9AD8\u7A0B\u5E8F\u7684\u6027\u80FD\u3002\u800C\u8FD9\u4E9B\u662F\u73B0\u4EE3 C++ \u5669\u68A6\u7684\u5F00\u59CB</p><h2 id="\u5DE6\u503C\u548C\u53F3\u503C" tabindex="-1"><a class="header-anchor" href="#\u5DE6\u503C\u548C\u53F3\u503C" aria-hidden="true">#</a> \u5DE6\u503C\u548C\u53F3\u503C</h2><p><img src="'+t+`" alt="value"></p><p>\u5148\u6765\u4E0B\u5B9A\u4E49\uFF1A</p><ul><li><strong>\u5DE6\u503C(loactor valu, lvalue)</strong> \u662F\u5B58\u50A8\u5728\u5185\u5B58\u4E2D\u3001\u6709\u660E\u786E\u5B58\u50A8\u5730\u5740\uFF08\u53EF\u5BFB\u5740\uFF09\u7684\u6570\u636E</li><li><strong>\u53F3\u503C(read value, rvalue)</strong> \u662F\u53EF\u4EE5\u63D0\u4F9B\u6570\u636E\u503C\u7684\u6570\u636E\uFF08\u4E0D\u4E00\u5B9A\u53EF\u4EE5\u5BFB\u5740\uFF0C\u4F8B\u5982\u5B58\u50A8\u4E8E\u5BC4\u5B58\u5668\u4E2D\u7684\u6570\u636E\uFF09\u3002\u540C\u65F6\u53F3\u503C\u53C8\u6709 <strong>\u7EAF\u53F3\u503C(pure rvalue)</strong> \u548C <strong>\u5C06\u4EA1\u503C(eXpiring Value)</strong> \u7684\u5206\u7C7B\u3002</li></ul><blockquote><p>locator value \u7FFB\u8BD1\u4E3A\u300C\u53EF\u5BFB\u5740\u53D8\u91CF\u300D\uFF0Cread value \u7FFB\u8BD1\u4E3A\u300C\u53EA\u8BFB\u53D8\u91CF(\u5B57\u9762\u91CF)\u300D\uFF0C\u56E0\u6B64 l \u548C r \u5E76\u4E0D\u662F\u5DE6\u53F3\u7684\u610F\u601D\uFF0C\u800C\u662F locator \u548C read \u7684\u610F\u601D</p></blockquote><p><strong>\u4F8B\u5982</strong>\uFF0C<code>x</code> \u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C\u56E0\u4E3A\u5176\u6709\u660E\u786E\u7684\u5185\u5B58\u5730\u5740\uFF1B<code>3</code> \u662F\u4E00\u4E2A\u7EAF\u53F3\u503C\uFF0C\u56E0\u4E3A\u5176\u4E0D\u5B58\u50A8\u5728\u5185\u5B58\u4E2D\uFF0C\u800C\u662F\u76F4\u63A5\u63D0\u4F9B\u6570\u636E\uFF08\u7684\u4E34\u65F6\uFF09\u503C\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// x \u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C3 \u662F\u4E00\u4E2A\u7EAF\u53F3\u503C\uFF08\u5B57\u9762\u91CF\uFF09</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>\u4F8B\u5982</strong>\uFF0C\u81EA\u589E\u64CD\u4F5C\u65F6\uFF0C<code>x++</code> \u662F\u4E00\u4E2A\u53F3\u503C\uFF0C<code>++x</code> \u662F\u4E00\u4E2A\u5DE6\u503C\u3002</p><ul><li><code>x++</code> <strong>\u8FD4\u56DE\u4E34\u65F6\u53D8\u91CF\uFF0C\u662F\u4E00\u4E2A\u53F3\u503C</strong>\u3002\u5728\u540E\u7F6E\u81EA\u589E\u64CD\u4F5C\u4E2D\uFF0C<code>x</code> \u7684\u503C\u4F1A\u88AB\u7F16\u8BD1\u5668\u62F7\u8D1D\u4E00\u4EFD\uFF0C\u7136\u540E\u81EA\u589E\uFF0C\u6700\u540E\u8FD4\u56DE\u62F7\u8D1D\u7684\u503C\u3002\u56E0\u6B64\u5BF9 <code>x++</code> \u53D6\u5730\u5740\u4F1A\u62A5\u9519</li><li><code>++x</code> <strong>\u8FD4\u56DE\u81EA\u5DF1\u672C\u8EAB\uFF0C\u662F\u4E00\u4E2A\u5DE6\u503C</strong>\u3002\u5BF9 <code>++x</code> \u53D6\u5730\u5740\u4E0D\u4F1A\u62A5\u9519</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// \u53F3\u503C</span>
<span class="token operator">++</span>x<span class="token punctuation">;</span>  <span class="token comment">// \u5DE6\u503C</span>
<span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// error: lvalue required as unary &#39;&amp;&#39; operand</span>
<span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token operator">++</span>x<span class="token punctuation">;</span>  <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4F8B\u5982</strong>\uFF0C\u901A\u5E38\u5B57\u9762\u91CF\u90FD\u662F\u53F3\u503C\uFF0C<strong>\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u9664\u5916</strong>\uFF0C\u867D\u7136\u5F88\u5C11\u8FD9\u6837\u505A\uFF0C\u4F46\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u5B58\u50A8\u5230\u7A0B\u5E8F\u4E2D\u5BF9\u6570\u636E\u6BB5\u65F6\uFF0C\u7A0B\u5E8F\u52A0\u8F7D\u5230\u65F6\u5019\u4E5F\u4F1A\u4E3A\u5176\u5206\u914D\u5185\u5B58\u5730\u5740\uFF0C\u56E0\u6B64<strong>\u662F\u5DE6\u503C</strong>\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lvalue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>\u4F8B\u5982</strong>\uFF0C\u51FD\u6570\u8FD4\u56DE\u503C</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 0x16f84b228 </span>
    <span class="token comment">// vec \u5DE6\u503C\uFF0C {1, 2, 3} \u53F3\u503C</span>
    <span class="token keyword">return</span> vec<span class="token punctuation">;</span> <span class="token comment">// \u8FD4\u56DE\u65F6\u62F7\u8D1D\u590D\u5236\u5230 std::vector&lt;int&gt; </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>  <span class="token comment">// 0x16f84b200  \u5DE6\u503C</span>
nums <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 0x16f84b200</span>
                        <span class="token comment">// RVO: 0x16f84b228</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u51FD\u6570 <code>func()</code> \u5185\u7684 <code>vec</code> \u662F\u4E00\u4E2A\u4E34\u65F6\u53D8\u91CF\uFF0C\u5728\u51FD\u6570\u7ED3\u675F\u540E\uFF0C <code>vec</code> \u4F1A\u88AB\u62F7\u8D1D\u4E00\u4EFD\u8FD4\u56DE\uFF0C\u7136\u540E\u7ACB\u5373\u9500\u6BC1\uFF0C\u8FD9\u5C31\u4F1A\u9020\u6210\u989D\u5916\u7684\u5F00\u9500</p><p>\u4F46\u662F\uFF0C\u7F16\u8BD1\u5668\u5BF9\u6B64\u8FDB\u884C\u4E86\u9ED8\u8BA4 <strong>RVO \u4F18\u5316</strong> (\u7981\u7528\u53EF\u4EE5\u6DFB\u52A0\u7F16\u8BD1\u9009\u9879 <code>-fno-elide-constructors</code>)\uFF0C\u4F1A\u5C06 <code>vec</code> \u8FDB\u884C\u9690\u5F0F\u53F3\u503C\u8F6C\u5316\uFF0C\u76F4\u63A5\u5C06 <code>vec</code> \u7684\u5185\u5BB9\u79FB\u52A8\u5230 <code>nums</code> \u4E2D\uFF0C\u800C\u4E0D\u662F\u62F7\u8D1D\u4E00\u4EFD\uFF0C\u8FD9\u6837\u5C31\u907F\u514D\u4E86\u989D\u5916\u7684\u5F00\u9500\u3002</p><h2 id="\u5DE6\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5DE6\u503C\u5F15\u7528" aria-hidden="true">#</a> \u5DE6\u503C\u5F15\u7528</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> lrval <span class="token operator">=</span> val<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9A\u4E49\u5DE6\u503C\u5F15\u7528\u7684\u65F6\u5019\u9700\u8981\u76F4\u63A5\u521D\u59CB\u5316\uFF0C\u5426\u5219\u4F1A\u62A5\u9519 <code>error: declaration of reference variable &#39;lrval&#39; requires an initializer</code></p><h2 id="\u53F3\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u53F3\u503C\u5F15\u7528" aria-hidden="true">#</a> \u53F3\u503C\u5F15\u7528</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span> rrval <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9A\u4E49\u53F3\u503C\u5F15\u7528\u7684\u65F6\u5019\u9700\u8981\u76F4\u63A5\u521D\u59CB\u5316\uFF0C\u5426\u5219\u4F1A\u62A5\u9519 <code>error: declaration of reference variable &#39;lrval&#39; requires an initializer</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue:&quot;</span> <span class="token operator">&lt;&lt;</span>ref<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue:&quot;</span> <span class="token operator">&lt;&lt;</span>ref<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: lvalue:1</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// output: rvalue:2</span>

    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> val2 <span class="token operator">=</span> val1<span class="token punctuation">;</span>  <span class="token comment">// error: rvalue reference to type &#39;int&#39; cannot bind to lvalue of type &#39;int&#39;</span>

    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> val3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span>val3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: lvalue:1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>val1</code> \u662F\u4E00\u4E2A\u5DE6\u503C</li><li><code>2</code> \u662F\u4E00\u4E2A\u53F3\u503C</li><li><code>int&amp;&amp; val2 = val1;</code> \u53F3\u503C\u5F15\u7528\u4E0D\u80FD\u5F15\u7528\u5DE6\u503C\uFF0C\u62A5\u9519 <code>error: rvalue reference to type &#39;int&#39; cannot bind to lvalue of type &#39;int&#39;</code></li><li><code>int&amp;&amp; val3 = std::move(val1);</code> \u53EF\u4EE5\u4F7F\u7528 <code>std::move</code> \u5C06\u5DE6\u503C\u8F6C\u5316\u4E3A\u53F3\u503C\uFF0C\u4F46\u662F\u8FD9\u91CC\u7684 <code>val3</code> \u4ECD\u7136\u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C\u56E0\u4E3A <code>val3</code> \u6709\u660E\u786E\u7684\u5185\u5B58\u5730\u5740\uFF0C\u53EF\u4EE5\u5BFB\u5740\uFF0C\u56E0\u6B64\u662F\u4E00\u4E2A\u5DE6\u503C</li></ul><blockquote><p>\u5927\u4F6C\u8BF4\u8FC7\u4E00\u53E5\u8BDD\uFF1A<strong>\u53F3\u503C\u7684\u6982\u5FF5\u5176\u5B9E\u5F88\u5FAE\u5999</strong>\uFF0C\u4E00\u65E6\u67D0\u4E2A\u53F3\u503C\uFF0C\u6709\u4E86\u540D\u5B57\uFF0C\u4E5F\u5C31\u5728\u5185\u5B58\u4E2D\u6709\u4E86\u4F4D\u7F6E\uFF0C\u5B83\u5C31\u53D8\u6210\u4E86\u4E00\u4E2A\u5DE6\u503C\u3002<strong>\u4F46\u5B83\u53C8\u662F\u4E00\u4E2A\u5F88\u6709\u7528\u7684\u6982\u5FF5</strong>\uFF0C\u5141\u8BB8\u7A0B\u5E8F\u5458\u66F4\u52A0\u7EC6\u7C92\u5EA6\u7684\u5904\u7406\u5BF9\u8C61\u62F7\u8D1D\u65F6\u7684\u5185\u5B58\u5206\u914D\u95EE\u9898\uFF0C\u63D0\u9AD8\u4E86\u5BF9\u4E34\u65F6\u5BF9\u8C61\u548C\u4E0D\u9700\u8981\u7684\u5BF9\u8C61\u7684\u5229\u7528\u7387\uFF0C\u6781\u5927\u63D0\u9AD8\u7A0B\u5E8F\u7684\u6548\u7387\u3002\u5F53\u7136\uFF0C\u4E5F\u4F1A\u5F15\u5165\u66F4\u591A\u7684bug\u3002\u4E0D\u8FC7\uFF0C\u8FD9\u5C31\u662FC++\u7684\u54F2\u5B66\uFF0C\u4EC0\u4E48\u90FD\u5141\u8BB8\u4F60\u505A\uFF0C\u4F46\u51FA\u4E86\u95EE\u9898\uFF0C\u53EF\u522B\u8D56C++\u8FD9\u95E8\u8BED\u8A00\u3002<sup><a href="#ref-11">[11]</a></sup></p></blockquote><h2 id="\u5F15\u7528\u7ED1\u5B9A" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u7ED1\u5B9A" aria-hidden="true">#</a> \u5F15\u7528\u7ED1\u5B9A</h2><p>\u300C<strong>\u53F3\u503C\u5F15\u7528</strong>\u300D\u53EA\u80FD\u7ED1\u5B9A\u5230\u300C<strong>\u53F3\u503C</strong>\u300D\u4E0A</p><p>\u300C<strong>\u5DE6\u503C\u5F15\u7528</strong>\u300D\u9664\u4E86\u53EF\u4EE5\u7ED1\u5B9A\u5230\u300C<strong>\u5DE6\u503C</strong>\u300D\u4E0A\uFF0C\u300C<strong>\u5E38\u91CF\u5DE6\u503C\u5F15\u7528</strong>\u300D\u8FD8\u53EF\u4EE5\u7ED1\u5B9A\u5230\u300C<strong>\u53F3\u503C</strong>\u300D\u4E0A\uFF0C\u4F46\u662F\u975E\u5E38\u5DE6\u503C\u5F15\u7528\u4E0D\u53EF\u7ED1\u5B9A\u5230\u53F3\u503C</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>       <span class="token comment">// \u975E\u5E38\u5DE6\u503C\u5F15\u7528 \u4E0D\u53EF \u7ED1\u5B9A\u5230\u53F3\u503C</span>
<span class="token keyword">const</span> string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// \u5E38\u91CF\u5DE6\u503C\u5F15\u7528 \u53EF\u4EE5 \u7ED1\u5B9A\u5230\u53F3\u503C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u89C4\u5219\u7B80\u5316\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>rvalue reference        <span class="token punctuation">{</span>rvalue<span class="token punctuation">}</span> <span class="token comment">// \u53F3\u503C\u5F15\u7528 \u7ED1\u5B9A\u5230 \u53F3\u503C</span>
lvalue reference        <span class="token punctuation">{</span>lvalue<span class="token punctuation">}</span> <span class="token comment">// \u5DE6\u503C\u5F15\u7528 \u7ED1\u5B9A\u5230 \u5DE6\u503C</span>
<span class="token keyword">const</span> lvalue reference  <span class="token punctuation">{</span>rvalue<span class="token punctuation">}</span> <span class="token comment">// \u5E38\u91CF\u5DE6\u503C\u5F15\u7528 \u7ED1\u5B9A\u5230 \u53F3\u503C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u76F8\u6BD4\u4E4B\u4E0B\uFF0C\u58F0\u660E\u4E2D\u5E26 \u201C&amp;&amp;\u201D \u7684\uFF0C\u53EF\u80FD\u662Flvalue references \u6216\u8005 rvalue references \u7684\u5F15\u7528\u53EF\u4EE5\u7ED1\u5B9A\u5230\u4EFB\u4F55\u4E1C\u897F\u4E0A\u3002\u8FD9\u79CD\u5F15\u7528\u7075\u6D3B\u4E5F\u5FD2\u7075\u6D3B\u4E86\uFF0C\u503C\u5F97\u5355\u72EC\u7ED9\u5B83\u4EEC\u8D77\u4E2A\u540D\u5B57\u3002\u6211\u79F0\u5B83\u4EEC\u4E3A <a href="#%E4%B8%87%E8%83%BD%E5%BC%95%E7%94%A8">\u300C<strong>\u4E07\u80FD\u5F15\u7528</strong>\u300D(universal references)</a></p><h2 id="\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</h2><h3 id="\u62F7\u8D1D\u6784\u9020\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D\u6784\u9020\u51FD\u6570" aria-hidden="true">#</a> \u62F7\u8D1D\u6784\u9020\u51FD\u6570</h3><p>\u5F53\u6CA1\u6709\u81EA\u5B9A\u4E49\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u65F6\uFF0C\u7F16\u8BD1\u5668\u4F1A\u81EA\u52A8\u751F\u6210\u4E00\u4E2A\u300C<strong>\u9ED8\u8BA4\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\uFF0C\u7C7B\u4F3C\u4E8E\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u8BE5\u51FD\u6570\u4F1A\u5C06\u4E00\u4E2A\u5BF9\u8C61\u7684\u6570\u636E\u6210\u5458\u7684\u503C\u62F7\u8D1D\u5230\u53E6\u4E00\u4E2A\u5BF9\u8C61\u4E2D\uFF0C\u4F46\u662F\u4E0D\u4F1A\u62F7\u8D1D\u5BF9\u8C61\u4E2D\u7684\u6307\u9488\u6210\u5458\uFF0C\u800C\u662F\u5C06\u6307\u9488\u6210\u5458\u7684\u503C\u62F7\u8D1D\u5230\u53E6\u4E00\u4E2A\u5BF9\u8C61\u4E2D\uFF0C\u8FD9\u6837\u4E24\u4E2A\u5BF9\u8C61\u4E2D\u7684\u6307\u9488\u6210\u5458\u6307\u5411\u540C\u4E00\u4E2A\u5730\u5740\uFF0C\u8FD9\u5C31\u662F<a href="#%E6%B5%85%E6%8B%B7%E8%B4%9D"><strong>\u6D45\u62F7\u8D1D</strong></a>\uFF0C\u6709\u65F6\u5019\u4F1A\u5BFC\u81F4\u7A0B\u5E8F\u51FA\u9519\u3002\u56E0\u6B64\u9700\u8981\u81EA\u5B9A\u4E49\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u5B9E\u73B0<a href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D"><strong>\u6DF1\u62F7\u8D1D</strong></a>\u3002</p><p>\u5982\u679C\u4E0D\u9700\u8981\u7F16\u8BD1\u5668\u81EA\u52A8\u751F\u6210\u7684\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u53EF\u4EE5\u4F7F\u7528 <code>= delete</code> \u5173\u952E\u5B57\uFF0C\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2753 \u54EA\u4E9B\u662F\u62F7\u8D1D\u6784\u9020\u51FD\u6570</p><p>\u5F53\u51FD\u6570\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u7C7B\u7684\u5BF9\u8C61\u7684\u5F15\u7528\uFF0C\u4E14\u6CA1\u6709\u8FD4\u56DE\u503C\u65F6\uFF0C\u8BE5\u51FD\u6570\u5C31\u662F\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u3002\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">volatile</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E3A\u4EC0\u4E48\u5F3A\u8C03\u7B2C\u4E00\u4E2A\u53C2\u6570\u5462\uFF0C\u56E0\u4E3A\uFF0C\u4E0B\u9762\u8FD9\u4E9B\u4E5F\u90FD\u662F\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u800C<strong>\u503C\u4F20\u9012</strong>\u7684\u4E0D\u662F\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">X</span><span class="token double-colon punctuation">::</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">volatile</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2753 <strong>\u4E3A\u4EC0\u4E48\u5462</strong>\u3002</p><p>\u56E0\u4E3A\uFF0C\u503C\u4F20\u9012\u7684\u65F6\u5019\uFF0C\u4F1A\u8C03\u7528\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u800C\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u53C8\u662F\u503C\u4F20\u9012\uFF0C\u8FD9\u6837\u5C31\u4F1A\u5BFC\u81F4\u65E0\u9650\u9012\u5F52\uFF0C\u76F4\u5230\u6808\u6EA2\u51FA\uFF0C\u56E0\u6B64\u7F16\u8BD1\u5668\u4F1A\u62A5\u9519\u3002</p><p>\u2753<strong>\u8FD8\u6709\u4E00\u4E2A\u7591\u60D1</strong>\u662F\uFF0C\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u91CC\u80FD\u8C03\u7528\u4E86\u53E6\u4E00\u4E2A\u5BF9\u8C61\u7684 <code>private</code> \u6210\u5458\u53D8\u91CF\uFF0C\u8FD9\u662F\u4E3A\u4EC0\u4E48\u5462</p><p>\u5B9E\u9645\u4E0A\uFF0C\u8FD9\u662F\u5BF9\u79C1\u6709\u6210\u5458\u53D8\u91CF\u7684\u7406\u89E3\u6709\u8BEF\uFF0C<strong>\u5C01\u88C5\u662F\u7F16\u8BD1\u671F\u7684\u6982\u5FF5\uFF0C\u662F\u9488\u5BF9\u7C7B\u578B\u800C\u975E\u5BF9\u8C61\u7684</strong>\uFF0C\u5728<strong>\u7C7B\u7684\u6210\u5458\u51FD\u6570\u4E2D\u53EF\u4EE5\u8BBF\u95EE\u300C\u540C\u7C7B\u578B\u5B9E\u4F8B\u5BF9\u8C61\u300D\u7684\u79C1\u6709\u6210\u5458\u53D8\u91CF</strong>\uFF0C\u5177\u4F53\u53C2\u8003<a href="#ref-5">[5]</a></p><h3 id="\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</h3><p>\u300C<strong>\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\u53EF\u4EE5\u770B\u6210\u662F\u4E00\u4E2A\u7279\u6B8A\u7684\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u5F53\u6CA1\u6709\u91CD\u5199\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26\u65F6\uFF0C\u7F16\u8BD1\u5668\u4F1A\u81EA\u52A8\u751F\u6210\u4E00\u4E2A\u300C<strong>\u9ED8\u8BA4\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\uFF0C\u7C7B\u4F3C\u4E8E\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>MyClass<span class="token operator">&amp;</span> MyClass<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u4E0D\u9700\u8981\u7F16\u8BD1\u5668\u81EA\u52A8\u751F\u6210\u7684\u8D4B\u503C\u6784\u9020\u51FD\u6570\uFF0C\u53EF\u4EE5\u4F7F\u7528 <code>= delete</code> \u5173\u952E\u5B57\uFF0C\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    MyClass<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26\u7684\u533A\u522B" aria-hidden="true">#</a> \u62F7\u8D1D\u6784\u9020\u51FD\u6570\u548C\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26\u7684\u533A\u522B</h3><p>\u300C<strong>\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\u548C\u300C<strong>\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\u90FD\u662F\u7528\u6765\u521D\u59CB\u5316\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u4F46\u662F\u300C<strong>\u8D4B\u503C\u6784\u9020\u51FD\u6570</strong>\u300D\u662F\u7528\u6765\u521D\u59CB\u5316\u4E00\u4E2A\u5DF2\u7ECF\u5B58\u5728\u7684\u5BF9\u8C61\uFF0C\u800C\u300C<strong>\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\u662F\u7528\u6765\u521D\u59CB\u5316\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61\u3002</p><p>\u4F8B\u5982\uFF0C\u5982\u4E0B\u7684\u4F8B\u5B50\u4F7F\u7528\u7684\u662F\u300C<strong>\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>MyClass obj1<span class="token punctuation">;</span>       <span class="token comment">// \u8C03\u7528\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</span>
MyClass <span class="token function">obj2</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyClass obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
MyClass obj3 <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyClass obj4 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyClass obj5 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token function">MyClass</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MyClass <span class="token operator">*</span>p_obj6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u4E0B\u7684\u4F8B\u5B50\u4F7F\u7528\u7684\u662F\u300C<strong>\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>MyClass obj1<span class="token punctuation">;</span>   <span class="token comment">// \u8C03\u7528\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</span>
MyClass obj2<span class="token punctuation">;</span>   <span class="token comment">// \u8C03\u7528\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</span>
obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6DF1\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u62F7\u8D1D" aria-hidden="true">#</a> \u6DF1\u62F7\u8D1D</h3><p>\u8003\u8651\u8FD9\u4E2A\u4F8B\u5B50\uFF0C\u7F16\u8BD1\u5668\u4F1A\u4E3A\u6211\u4EEC\u81EA\u52A8\u751F\u6210\u4E00\u4E2A\u62F7\u8D1D\u6784\u9020\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>   <span class="token comment">// \u9759\u6001\u6210\u5458</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> count<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> MyClass<span class="token double-colon punctuation">::</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// \u9759\u6001\u6210\u5458\u521D\u59CB\u5316\uFF08\u5FC5\u987B\u5728\u7C7B\u5916\uFF09</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass mc1<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
    MyClass <span class="token function">mc2</span><span class="token punctuation">(</span>mc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u65F6\u5019\u51FA\u73B0\u7684\u95EE\u9898\u662F\uFF0C\u8F93\u51FA\u90FD\u662F 1 \uFF0C\u8FD9\u4F1A\u5BFC\u81F4\u5728\u6790\u6784\u7684\u65F6\u5019\uFF0C\u4F1A\u4F7F\u5F97 <code>count</code> \u4E3A -1\uFF0C\u8FD9\u662F\u4E0D\u7B26\u5408\u9884\u671F\u7684</p><p>\u8FD9\u662F\u56E0\u4E3A\u5728\u9ED8\u8BA4\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u4E2D\uFF0C\u53EA\u662F\u7B80\u5355\u7684\u5C06 <code>mc1</code> \u7684\u503C\u8D4B\u503C\u7ED9 <code>mc2</code>\uFF0C\u8FD9\u6837 <code>mc1</code> \u548C <code>mc2</code> \u7684 <code>count</code> \u90FD\u6307\u5411\u540C\u4E00\u4E2A\u5730\u5740\uFF0C\u56E0\u6B64\u5728\u6790\u6784\u7684\u65F6\u5019\uFF0C\u4F1A\u5BFC\u81F4 <code>count</code> \u51CF\u5C11\u4E24\u6B21\uFF0C\u56E0\u6B64 <code>count</code> \u4E3A -1</p><p>\u4E3A\u6B64\uFF0C\u9700\u8981\u81EA\u5B9A\u4E49\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u5B9E\u73B0\u6DF1\u62F7\u8D1D\u3002\u8FD9\u65F6\u5019\u518D\u8F93\u51FA <code>count</code> \u5C31\u662F 2 \u4E86</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6D45\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6D45\u62F7\u8D1D" aria-hidden="true">#</a> \u6D45\u62F7\u8D1D</h3><p>\u8003\u8651\u4E0B\u9762\u8FD9\u4E2A\u4F8B\u5B50\uFF0C\u7F16\u8BD1\u5668\u751F\u6210\u7684\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u4F1A\u5C06 <code>mc1</code> \u7684 <code>p</code> \u7684\u503C\u8D4B\u503C\u7ED9 <code>mc2</code> \u7684 <code>p</code>\uFF0C\u8FD9\u6837 <code>mc1</code> \u548C <code>mc2</code> \u7684 <code>p</code> \u90FD\u6307\u5411\u540C\u4E00\u4E2A\u5730\u5740\uFF0C\u56E0\u6B64\u5728\u6790\u6784\u7684\u65F6\u5019\uFF0C\u4F1A\u5BFC\u81F4 <code>p</code> \u88AB\u91CA\u653E\u4E24\u6B21\uFF0C\u56E0\u6B64\u4F1A\u62A5\u9519</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>p<span class="token operator">!</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>p<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MyClass mc1<span class="token punctuation">;</span>
  MyClass <span class="token function">mc2</span><span class="token punctuation">(</span>mc1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E3A\u6B64\uFF0C\u9700\u8981\u81EA\u5B9A\u4E49\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u4E3A <code>p</code> \u91CD\u65B0\u5206\u914D\u5185\u5B58\uFF0C\u5B9E\u73B0\u6DF1\u62F7\u8D1D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> obj<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>p <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u7684\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u7684\u5E94\u7528" aria-hidden="true">#</a> \u62F7\u8D1D\u6784\u9020\u51FD\u6570\u7684\u5E94\u7528</h3><ul><li>\u4ECE <a href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D">\u6DF1\u62F7\u8D1D</a> \u7684\u4F8B\u5B50\u4E2D\u53EF\u4EE5\u770B\u51FA\uFF0C\u5F53\u300C<strong>\u6570\u636E\u6210\u5458\u4E2D\u6709\u9759\u6001\u6210\u5458</strong>\u300D\u65F6\uFF0C\u9700\u8981\u8003\u8651\u81EA\u5B9A\u4E49\u62F7\u8D1D\u6784\u9020\u51FD\u6570\uFF0C\u5904\u7406\u9759\u6001\u6210\u5458</li><li>\u4ECE <a href="#%E6%B5%85%E6%8B%B7%E8%B4%9D">\u6D45\u62F7\u8D1D</a> \u7684\u4F8B\u5B50\u4E2D\u53EF\u4EE5\u770B\u51FA\uFF0C\u5F53\u300C<strong>\u6570\u636E\u6210\u5458\u4E2D\u6709\u6307\u9488</strong>\u300D\u65F6\uFF0C\u5FC5\u987B\u8981\u7528\u300C<strong>\u6DF1\u62F7\u8D1D</strong>\u300D</li></ul><h2 id="\u79FB\u52A8\u8BED\u4E49" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u8BED\u4E49" aria-hidden="true">#</a> \u79FB\u52A8\u8BED\u4E49</h2><p>\u79FB\u52A8\u8BED\u4E49\u7684\u51FA\u73B0\u5B9E\u9645\u4E0A\u662F\u4E3A\u4E86\u89E3\u51B3\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u7684\u95EE\u9898\uFF0C\u56E0\u4E3A\u62F7\u8D1D\u6784\u9020\u51FD\u6570\u4F1A\u9020\u6210\u989D\u5916\u7684\u5F00\u9500\uFF0C\u800C\u79FB\u52A8\u8BED\u4E49\u53EF\u4EE5\u907F\u514D\u8FD9\u79CD\u989D\u5916\u7684\u5F00\u9500\u3002</p><p>\u8003\u8651\u4E0B\u9762\u8FD9\u4E2A\u4F8B\u5B50<sup><a href="#ref-6">[6]</a></sup></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token operator">:</span> str<span class="token punctuation">{</span> s <span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> mc_list<span class="token punctuation">;</span>
    MyClass tmp<span class="token punctuation">{</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    mc_list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp \u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C\u62F7\u8D1D</span>
    mc_list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp \u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C\u62F7\u8D1D</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6BCF\u6B21 <code>push_back</code> \u7684\u65F6\u5019\uFF0C\u90FD\u4F1A\u53D1\u751F\u4E00\u6B21\u62F7\u8D1D\u64CD\u4F5C\uFF0C\u5728\u4E24\u6B21\u6DFB\u52A0\u540E\uFF0C<code>tmp</code> \u7684\u751F\u547D\u5468\u671F\u5373\u5C06\u7ED3\u675F\uFF0C\u90A3\u4E48\u4F60\u4E0D\u80FD\u5C06 <code>tmp</code> \u7684\u5185\u5B58\u201C\u79FB\u52A8\u201D\u5230 <code>mc_list</code> \u4E2D\u5417\uFF1F\u8FD9\u6837\u5C31\u53EF\u4EE5\u907F\u514D\u989D\u5916\u7684\u62F7\u8D1D\u64CD\u4F5C\u4E86</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> mc_list<span class="token punctuation">;</span>
    MyClass tmp<span class="token punctuation">{</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    mc_list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp \u662F\u4E00\u4E2A\u5DE6\u503C\uFF0C\u62F7\u8D1D</span>
    mc_list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5C06\u5DE6\u503C\u8F6C\u5316\u4E3A\u53F3\u503C</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u7684 <code>std::move</code> \u5C31\u662F\u79FB\u52A8\u8BED\u4E49\uFF0C\u5C06\u5DE6\u503C\u8F6C\u5316\u4E3A\u53F3\u503C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u907F\u514D\u989D\u5916\u7684\u62F7\u8D1D\u64CD\u4F5C\u4E86\uFF0C\u4E3A\u4EC0\u4E48\u5462\uFF1F\u56E0\u4E3A <code>std::vector</code> \u7684 <code>push_back</code> \u9488\u5BF9<strong>\u5DE6\u503C (\u62F7\u8D1D)</strong> \u548C<strong>\u53F3\u503C (\u79FB\u52A8)</strong> \u6709\u4E0D\u540C\u7684\u5B9E\u73B0\uFF0C\u67E5\u770B\u7684\u6E90\u7801 (Apple Clang 14.0)\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u524D\u9762\u6709 \`typedef const value_type&amp;  const_reference;\`</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Allocator</span><span class="token operator">&gt;</span>
_LIBCPP_CONSTEXPR_SINCE_CXX20
<span class="token keyword">inline</span> _LIBCPP_HIDE_FROM_ABI
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Allocator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span>const_reference __x<span class="token punctuation">)</span> <span class="token comment">// \u5DE6\u503C\u5F15\u7528</span>
<span class="token punctuation">{</span>   <span class="token comment">// \u6267\u884C\u62F7\u8D1D\u64CD\u4F5C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>__end_ <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">__end_cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">__construct_one_at_end</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">__push_back_slow_path</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Allocator</span><span class="token operator">&gt;</span>
_LIBCPP_CONSTEXPR_SINCE_CXX20
<span class="token keyword">inline</span> _LIBCPP_HIDE_FROM_ABI
<span class="token keyword">void</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>_Tp<span class="token punctuation">,</span> _Allocator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span>value_type<span class="token operator">&amp;&amp;</span> __x<span class="token punctuation">)</span> <span class="token comment">// \u53F3\u503C\u5F15\u7528</span>
<span class="token punctuation">{</span>   <span class="token comment">// \u6267\u884C\u79FB\u52A8\u64CD\u4F5C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>__end_ <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">__end_cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">__construct_one_at_end</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">__push_back_slow_path</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>__x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u603B\u7ED3\u4E00\u4E0B\uFF0C\u5C31\u662F\u79FB\u52A8\u8BED\u4E49 <code>std::move</code> \u53EF\u4EE5\u5C06\u5DE6\u503C\u8F6C\u5316\u4E3A\u53F3\u503C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u907F\u514D\u989D\u5916\u7684\u62F7\u8D1D\u64CD\u4F5C\u4E86</p><h2 id="\u79FB\u52A8\u6784\u9020\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u6784\u9020\u51FD\u6570" aria-hidden="true">#</a> \u79FB\u52A8\u6784\u9020\u51FD\u6570</h2><p>\u8FD8\u662F\u4E0A\u9762\u7684\u7C7B\uFF0C\u6211\u4EEC\u589E\u52A0\u300C<strong>\u79FB\u52A8\u6784\u9020\u51FD\u6570</strong>\u300D\uFF0C\u79FB\u52A8\u6784\u9020\u51FD\u6570\u63A5\u53D7\u4E00\u4E2A\u53F3\u503C\u5F15\u7528\uFF0C\u4F8B\u5982\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token operator">:</span> str<span class="token punctuation">{</span> s <span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// \u79FB\u52A8\u6784\u9020\u51FD\u6570</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span>MyClass<span class="token operator">&amp;&amp;</span> rValue<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// noexcept</span>
    <span class="token operator">:</span> str<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>rValue<span class="token punctuation">.</span>str<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6709\u4E86\u79FB\u52A8\u6784\u9020\u51FD\u6570\u4E4B\u540E\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u5B83\u6765\u521B\u5EFA\u65B0\u7684\u5BF9\u8C61\uFF0C\u907F\u514D\u62F7\u8D1D\u64CD\u4F5C\u7684\u5F00\u9500</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>MyClass tmp<span class="token punctuation">{</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
MyClass A<span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// \u8C03\u7528\u79FB\u52A8\u6784\u9020\u51FD\u6570</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610F <code>noexcept</code> \u8BF4\u660E\u7B26\u662F\u6211\u4EEC\u5BF9\u4E8E\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\u7684\u4FDD\u8BC1\uFF0C\u5982\u679C\u5728\u6267\u884C\u7684\u8FC7\u7A0B\u4E2D\u6709\u5F02\u5E38\u88AB\u629B\u51FA\u4E86\uFF0C\u5E94\u7528\u7A0B\u5E8F\u5C06\u4F1A\u76F4\u63A5\u7EC8\u6B62\u6267\u884C\u3002\u4E5F\u5C31\u662F\u544A\u77E5\u7F16\u8BD1\u5668\uFF0C\u6211\u4EEC\u7684\u79FB\u52A8\u6784\u9020\u51FD\u6570\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\uFF0C\u53EF\u4EE5\u653E\u5FC3\u4F7F\u7528</p><h2 id="\u4E07\u80FD\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u4E07\u80FD\u5F15\u7528" aria-hidden="true">#</a> \u4E07\u80FD\u5F15\u7528</h2><p>\u8003\u8651\u4E0B\u9762\u7684\u4F8B\u5B50<sup><a href="#ref-7">[7]</a></sup>\uFF0C\u7528\u5230\u7684\u51FD\u6570 <code>type_to_string</code> \u53C2\u8003 <sup><a href="#ref-8">[8]</a></sup></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>string <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;lvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
string <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;rvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> boolalpha<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">type_to_string</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> is_lvalue_reference<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u62A5\u9519\uFF0C\u65E0\u6CD5\u5C06\u5DE6\u503C\u7ED1\u5B9A\u5230\u53F3\u503C\u5F15\u7528</span>
    <span class="token function">g</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: int&amp;&amp;, true, lvalue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u4F8B\u5B50\u8FC7\u7A0B\u5982\u4E0B\uFF1A</p><ul><li>\u56E0\u4E3A\u4F20\u5165\u7684\u662F\u4E00\u4E2A\u7EAF\u53F3\u503C <code>10</code> \uFF0C\u56E0\u4E3A\u4F20\u5165\u540E\u5C31\u201C\u4E0D\u5B58\u5728\u201D\u4E86\uFF0C\u56E0\u6B64\u88AB\u9690\u5F0F\u5730\u8F6C\u6362\u4E3A\u5C06\u4EA1\u503C</li><li>\u51FD\u6570\u53C2\u6570\u4E2D\uFF0C<code>10</code> \u88AB\u7ED1\u5B9A\u5230\u53F3\u503C\u5F15\u7528 <code>a</code> (\u63A8\u5BFC\u4E3A <code>int&amp;&amp;</code>)\u3002\u6240\u4EE5\u8FD9\u91CC\u8F93\u51FA <code>int&amp;&amp;</code></li><li>\u53F3\u503C\u5F15\u7528 <code>a</code> \u662F\u4E00\u4E2A\u5DE6\u503C(\u63A8\u5BFC\u4E3A <code>int&amp;</code>)\uFF0C\u6240\u4EE5\u8F93\u51FA <code>lvalue</code>\u3002\u6240\u4EE5\u8FD9\u91CC\u8F93\u51FA <code>true</code></li><li>\u6839\u636E <code>a</code> \u7684\u7C7B\u578B\u91CD\u8F7D\uFF0C\u8C03\u7528 <code>f(int &amp;a)</code>\uFF0C\u6240\u4EE5\u8F93\u51FA <code>lvalue</code></li></ul><p>\u6240\u4EE5\u53EF\u4EE5\u770B\u51FA\uFF0C\u51FD\u6570\u7684\u5DE6\u503C\u5F15\u7528\u548C\u53F3\u503C\u5F15\u7528\u7684\u91CD\u8F7D\uFF0C\u6240\u4F9D\u636E\u7684\u662F\u300C<strong>\u503C\u7684\u7C7B\u578B</strong>\u300D\uFF0C\u800C\u4E0D\u662F\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B</p><p>\u7136\u800C\u5B9E\u9645\u4E0A\u6211\u4EEC\u5E76\u4E0D\u5173\u5FC3\u503C\u7684\u7C7B\u578B\uFF0C\u800C\u662F\u5173\u5FC3\u8868\u8FBE\u5F0F\u6240\u6301\u6709\u7684\u8D44\u6E90\u80FD\u4E0D\u80FD\u83B7\u53D6\u3002\u5BF9\u4E8E\u4E00\u4E2A\u51FD\u6570\u6240\u63A5\u53D7\u7684\u53C2\u6570\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5C06\u5176\u5206\u4E3A\u4E24\u7C7B\uFF1A</p><ul><li><strong>\u5DE6\u503C</strong>\uFF1A\u6211\u4EEC\u65E0\u6CD5\u83B7\u53D6\u5176\u8D44\u6E90\uFF0C\u56E0\u4E3A\u5176\u8D44\u6E90\u53EF\u80FD\u88AB\u5176\u4ED6\u5BF9\u8C61\u6240\u6301\u6709</li><li><strong>\u5C06\u4EA1\u503C</strong>\uFF1A\u6211\u4EEC\u53EF\u4EE5\u83B7\u53D6\u5176\u8D44\u6E90\uFF0C\u56E0\u4E3A\u5176\u8D44\u6E90\u5373\u5C06\u88AB\u9500\u6BC1\uFF0C\u56E0\u6B64\u53EF\u4EE5\u76F4\u63A5\u62FF\u6765\u4F7F\u7528</li></ul><p>\u5BF9\u4E8E\u8FD9\u4E24\u79CD\u60C5\u51B5\uFF0C\u9700\u8981\u52A0\u4EE5\u533A\u5206\u3002\u4F46\u662F\u6211\u4EEC\u5E0C\u671B\u5C06\u4E24\u4E2A\u91CD\u8F7D\u51FD\u6570\u5408\u5E76\u4E3A\u4E00\u4E2A\u51FD\u6570\u6A21\u677F\uFF0C</p><p>\u7B2C\u4E00\u6B65\uFF0C\u9700\u8981\u5F15\u5165\u300C<strong>\u4E07\u80FD\u5F15\u7528</strong>\u300D\u63A8\u5BFC\u8868\u8FBE\u5F0F\u7684\u503C\u7C7B\u578B\uFF0C\u4E07\u80FD\u5F15\u7528\u9700\u8981\u501F\u52A9\u4E8E\u6A21\u677F\uFF0C\u4E5F\u5C31\u662F <code>T&amp;&amp;</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \`constexpr\` compiled with -std=c++17</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
string <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>is_lvalue_reference<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;lvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>is_rvalue_reference<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;rvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u7684 <code>T&amp;&amp;</code> \u53EF\u4EE5\u6839\u636E\u4F20\u5165\u7684\u53C2\u6570\u63A8\u5BFC\u51FA\u7C7B\u578B \uFF08\u8FD9\u91CC\u6D89\u53CA\u5230<a href="#%E5%BC%95%E7%94%A8%E6%8A%98%E5%8F%A0"><strong>\u5F15\u7528\u6298\u53E0</strong></a>\uFF09</p><ul><li>\u5F53\u4F20\u5165\u7684\u662F<strong>\u5DE6\u503C</strong>\u65F6\uFF0C<code>T</code> \u63A8\u5BFC\u4E3A\u5DE6\u503C\u5F15\u7528 <code>T&amp;</code>\u3002</li><li>\u5F53\u4F20\u5165\u7684\u662F<strong>\u5C06\u4EA1\u503C</strong>\u65F6\uFF0C<code>T</code> \u63A8\u5BFC\u4E3A\u53F3\u503C\u5F15\u7528 <code>T&amp;&amp;</code>\u3002</li></ul><p>\u6240\u4EE5\uFF0C\u6700\u540E <code>a</code> \u7684\u7C7B\u578B\u53EA\u4E0E\u4F20\u5165\u8868\u8FBE\u5F0F\u7684\u503C\u7C7B\u578B\u6709\u5173\uFF0C\u4F46\u662F\u4E0D\u7BA1\u4F20\u5165\u8868\u8FBE\u5F0F\u7684\u503C\u7C7B\u578B\u662F\u4EC0\u4E48\uFF0C <code>a</code> \u7684\u503C\u7C7B\u578B\u90FD\u4F1A\u53D8\u4E3A\u5DE6\u503C</p><p>\u7B2C\u4E8C\u6B65\uFF0C\u5C06 <code>a</code> \u7684\u503C\u7C7B\u578B\u4E0E\u8868\u8FBE\u5F0F\u7684\u503C\u7C7B\u578B\u8FDB\u884C\u540C\u6B65\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u53EF\u4EE5\u5229\u7528 <code>decltype(a)</code> \u6765\u83B7\u53D6\u503C\u7C7B\u578B\uFF0C\u5E76\u4E14\u5229\u7528 <code>static_cast&lt;decltype(a)&gt;(a)</code> \u6765\u5C06 <code>a</code> \u7684\u7C7B\u578B\u8F6C\u5316\u4E3A <code>a</code> \u7684\u503C\u7C7B\u578B\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
string <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>is_lvalue_reference<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;lvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>is_rvalue_reference<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;rvalue&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u65F6\u5019\u8C03\u7528</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// output: lvalue</span>
            <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output: lvalue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8868\u8FBE\u5F0F\u5F88\u957F\uFF0C\u9700\u8981\u89E3\u91CA\u4E00\u4E0B <code>is_lvalue_reference&lt;decltype((static_cast&lt;decltype(a)&gt;(a)))&gt;::value</code> \u662F\u4E2A\u4EC0\u4E48\u4E1C\u897F\u3002</p><ol><li><p>\u9996\u5148\uFF0C<code>decltype(a)</code> \u662F\u83B7\u53D6 <code>a</code> \u7684\u503C\u7C7B\u578B</p></li><li><p><code>static_cast&lt;decltype(a)&gt;(a)</code> \u662F\u5C06 <code>a</code> \u7684\u7C7B\u578B\u8F6C\u5316\u4E3A <code>a</code> \u7684\u503C\u7C7B\u578B</p></li><li><p><code>decltype((...))</code> \u662F <code>static_cast&lt;decltype(a)&gt;(a)</code> \u7684\u503C\u7C7B\u578B</p></li><li><p><code>is_lvalue_reference&lt;...&gt;::value</code> \u662F\u5224\u65AD <code>decltype((...))</code> \u7684\u503C\u7C7B\u578B\u662F\u5426\u4E3A\u5DE6\u503C\u5F15\u7528\uFF0C\u4E5F\u5C31\u662F <code>static_cast&lt;decltype(a)&gt;(a)</code> \u7684\u503C\u7C7B\u578B\u662F\u5426\u4E3A\u5DE6\u503C\u5F15\u7528\uFF0C\u4E5F\u5C31\u662F <code>a</code> \u7684\u503C\u7C7B\u578B\u662F\u5426\u4E3A\u5DE6\u503C\u5F15\u7528</p></li></ol><blockquote><p><code>decltype(a)</code> \u662F\u83B7\u53D6 <code>a</code> \u7684\u503C\u7C7B\u578B\uFF0C<code>decltype((a))</code> \u662F\u83B7\u53D6 <code>a</code> \u7684\u5F15\u7528\u7C7B\u578B\uFF0C<a href="https://segmentfault.com/q/1010000000516149" target="_blank" rel="noopener noreferrer">\u201CC++ decltype((i))\u4E3A\u4EC0\u4E48\u662F\u4E2A\u5F15\u7528\uFF1F\u201D</a></p></blockquote><h2 id="\u5F15\u7528\u6298\u53E0" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u6298\u53E0" aria-hidden="true">#</a> \u5F15\u7528\u6298\u53E0</h2><p>\u5F15\u7528\u6298\u53E0(reference collapsing) \u662F C++11 \u4E2D\u7684\u4E00\u4E2A\u65B0\u7279\u6027\uFF0C\u5B83\u662F\u4E3A\u4E86\u89E3\u51B3\u4E07\u80FD\u5F15\u7528\u4E2D\u7684\u95EE\u9898\u800C\u51FA\u73B0\u7684\u3002\u5F15\u7528\u6298\u53E0\u7684\u89C4\u5219\u5982\u4E0B\uFF1A</p><table><thead><tr><th>\u6A21\u677F\u7C7B\u578B</th><th>T \u5B9E\u9645\u7C7B\u578B</th><th>\u6700\u7EC8\u7C7B\u578B</th></tr></thead><tbody><tr><td><code>T&amp;</code></td><td><code>R</code></td><td><code>R&amp;</code></td></tr><tr><td><code>T&amp;</code></td><td><code>R&amp;</code></td><td><code>R&amp;</code></td></tr><tr><td><code>T&amp;</code></td><td><code>R&amp;&amp;</code></td><td><code>R&amp;</code></td></tr><tr><td><code>T&amp;&amp;</code></td><td><code>R</code></td><td><code>R&amp;&amp;</code></td></tr><tr><td><code>T&amp;&amp;</code></td><td><code>R&amp;</code></td><td><code>R&amp;</code></td></tr><tr><td><code>T&amp;&amp;</code></td><td><code>R&amp;&amp;</code></td><td><code>R&amp;&amp;</code></td></tr></tbody></table><blockquote><p>\u5B9E\u9645\u4E0A\uFF0C\u53EA\u8981\u5DE6\u503C\u5F15\u7528\u4F1A\u4F20\u67D3\uFF0C\u6CBE\u4E0A\u4E00\u4E2A\u5DE6\u503C\u5F15\u7528\u5C31\u53D8\u5DE6\u503C\u5F15\u7528\u4E86<sup><a href="#ref-9">[9]</a></sup></p></blockquote><p>\u6839\u672C\u539F\u56E0\u662F\u56E0\u4E3A C++ \u4E2D\u7981\u6B62 reference to reference \uFF0C\u6240\u4EE5\u7F16\u8BD1\u5668\u9700\u8981\u5BF9\u56DB\u79CD\u60C5\u51B5(\u4E5F\u5C31\u662F L2L,L2R,R2L,R2R )\u8FDB\u884C\u5904\u7406\uFF0C\u5C06\u4ED6\u4EEC\u201C\u6298\u53E0\u201D(\u4E5F\u53EF\u8BF4\u662F\u201C\u574D\u7F29\u201D)\u6210\u4E00\u79CD\u5355\u4E00\u7684 reference \u3002<sup><a href="#ref-9">[9]</a></sup></p><p>\u8FD9\u65F6\u5019\u6211\u4EEC\u518D\u6765\u770B\u8FD9\u4E00\u6BB5\u4EE3\u7801</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
string <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u89E3\u91CA\u4E00\u4E0B\u4E24\u6B21\u8C03\u7528\u5B9E\u9645\u53D1\u751F\u4E86\u4EC0\u4E48\uFF0C</p><ul><li><code>int x = 20; f(x);</code> \u4F20\u5165\u51FD\u6570\u7684 <code>b</code> \u662F\u4E00\u4E2A\u5DE6\u503C(<code>L</code>)\uFF0C\u6A21\u677F\u7C7B\u578B\u662F\u4E00\u4E2A\u4E07\u80FD\u5F15\u7528 <code>T&amp;&amp;</code>\uFF0C\u56E0\u6B64 <code>T</code> \u63A8\u5BFC\u4E3A\u5DE6\u503C\u5F15\u7528 <code>T&amp;</code>\uFF0C\u56E0\u6B64 <code>a</code> \u7684\u7C7B\u578B\u4E3A <code>T&amp;</code></li><li><code>f(10);</code> \u4F20\u5165\u51FD\u6570\u7684 <code>10</code> \u662F\u4E00\u4E2A\u7EAF\u53F3\u503C\uFF0C\u56E0\u6B64\u88AB\u9690\u5F0F\u5730\u8F6C\u6362\u4E3A\u5C06\u4EA1\u503C(<code>R</code>)\uFF0C\u6A21\u677F\u7C7B\u578B\u662F\u4E00\u4E2A\u4E07\u80FD\u5F15\u7528 <code>T&amp;&amp;</code>\uFF0C\u56E0\u6B64 <code>T</code> \u63A8\u5BFC\u4E3A\u53F3\u503C\u5F15\u7528 <code>T&amp;&amp;</code>\uFF0C\u56E0\u6B64 <code>a</code> \u7684\u7C7B\u578B\u4E3A <code>T&amp;&amp;</code></li></ul><h2 id="\u5B8C\u7F8E\u8F6C\u53D1" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u7F8E\u8F6C\u53D1" aria-hidden="true">#</a> \u5B8C\u7F8E\u8F6C\u53D1</h2><p>\u5728<a href="#%E4%B8%87%E8%83%BD%E5%BC%95%E7%94%A8"><strong>\u4E07\u80FD\u5F15\u7528</strong></a>\u4E2D\uFF0C\u51FA\u73B0\u4E86\u4E00\u4E2A <code>is_lvalue_reference&lt;decltype((static_cast&lt;decltype(a)&gt;(a)))&gt;::value</code>\uFF0C\u5176\u4E2D\u6700\u91CD\u8981\u7684\u662F <code>static_cast&lt;decltype(a)&gt;(a)</code>\uFF0C\u5176\u76EE\u7684\u662F\u5C06 <code>a</code> \u7684\u7C7B\u578B\u8F6C\u5316\u4E3A <code>a</code> \u7684\u503C\u7C7B\u578B\uFF0C\u8FD9\u79CD\u8F6C\u5316\u5C31\u662F\u300C<strong>\u5B8C\u7F8E\u8F6C\u53D1</strong>\u300D\uFF0C\u4E5F\u5C31\u662F<code>std::forward&lt;T&gt;(a)</code>\uFF0C\u5176\u6E90\u7801 (Apple Clang 14.0) \u5982\u4E0B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
_LIBCPP_NODISCARD_EXT <span class="token keyword">inline</span> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp<span class="token operator">&amp;&amp;</span>
<span class="token function">forward</span><span class="token punctuation">(</span>_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __t<span class="token punctuation">)</span> _NOEXCEPT <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Tp</span><span class="token operator">&gt;</span>
_LIBCPP_NODISCARD_EXT <span class="token keyword">inline</span> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp<span class="token operator">&amp;&amp;</span>
<span class="token function">forward</span><span class="token punctuation">(</span>_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> _NOEXCEPT <span class="token punctuation">{</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span>is_lvalue_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token string">&quot;cannot forward an rvalue as an lvalue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u51FA\uFF0C\u5176\u539F\u7406\u5B9E\u9645\u4E0A\u5C31\u662F <code>static_cast&lt;_Tp&amp;&amp;&gt;(__t)</code>\uFF0C\u8FD9\u91CC\u7684 <code>_Tp</code> \u5C31\u662F <code>T</code>\uFF0C\u4E5F\u5C31\u662F <code>a</code> \u7684\u503C\u7C7B\u578B\uFF0C<code>__t</code> \u5C31\u662F <code>a</code>\uFF0C\u4E5F\u5C31\u662F <code>a</code> \u7684\u5F15\u7528\u7C7B\u578B\uFF0C\u56E0\u6B64 <code>static_cast&lt;_Tp&amp;&amp;&gt;(__t)</code> \u5C31\u662F\u5C06 <code>a</code> \u7684\u5F15\u7528\u7C7B\u578B\u8F6C\u5316\u4E3A <code>a</code> \u7684\u503C\u7C7B\u578B\uFF0C\u8FD9\u5C31\u662F\u300C<strong>\u5B8C\u7F8E\u8F6C\u53D1</strong>\u300D\u3002</p><p>\u6240\u4EE5\u4E0A\u8FF0\u4EE3\u7801\u53EF\u4EE5\u7B80\u5316\u4E3A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>is_lvalue<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>is_xvalue<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;xvalue&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u7684\u4F8B\u5B50\u6709\u4E9B\u8BB8\u590D\u6742\uFF0C\u6211\u4EEC\u5728\u770B\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50<sup><a href="#ref-11">[11]</a></sup></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">getR</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;lvalueR&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">getR</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;rvalueR&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">testForward</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token function">getR</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// v \u5DF2\u7ECF\u662F\u4E2A\u5DE6\u503C\uFF0C\u6C38\u8FDC\u8C03\u7528\u5DE6\u503C\u7248\u672C</span>
    <span class="token function">getR</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// \u6C38\u8FDC\u8C03\u7528\u53F3\u503C\u7248\u672C</span>
    <span class="token function">getR</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u53D6\u51B3\u4E8E\u5B9E\u53C2\u7684\u7C7B\u578B</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">testForward</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//\u5B9E\u53C2\u4E3A\u5DE6\u503C\uFF0C\u8C03\u7528\u5DE6\u503C\u7248\u672C</span>
    <span class="token function">testForward</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5B9E\u53C2\u4E3A\u53F3\u503C\uFF0C\u8C03\u7528\u53F3\u503C\u7248\u672C</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u4F8B\u5B50\u5C31\u6BD4\u8F83\u6E05\u695A\u4E86\uFF0C<code>std::forward&lt;T&gt;(v)</code> \u5C31\u662F\u5C06 <code>v</code> \u7684\u5F15\u7528\u7C7B\u578B\u8F6C\u5316\u4E3A <code>v</code> \u7684\u503C\u7C7B\u578B\uFF0C\u5176\u8C03\u7528\u54EA\u4E00\u4E2A\u91CD\u8F7D\u51FD\u6570\uFF0C\u53D6\u51B3\u4E8E\u4F20\u9012\u8FDB\u6765\u7684\u53C2\u6570\u662F\u5DE6\u503C\u8FD8\u662F\u53F3\u503C</p><ul><li><p>\u8FD9\u4E2A\u4F8B\u5B50\u5176\u5B9E\u4F53\u73B0\u4E86\u300C<strong>\u5B8C\u7F8E\u8F6C\u53D1\u5B58\u5728\u7684\u610F\u4E49</strong>\u300D\uFF0C\u90A3\u5C31\u662F\u4F60\u53EF\u4EE5\u7528\u4E0D\u4E0A\uFF0C\u4F46\u4E0D\u80FD\u6CA1\u6709\u7684\u201C\u529F\u80FD\u201D\u3002\u53EA\u8981\u4F60\u7684\u51FD\u6570\u63A5\u53D7\u4E86\u901A\u7528\u5F15\u7528\uFF0C\u53C8\u9700\u8981\u628A\u8FD9\u4E9B\u901A\u7528\u5F15\u7528\u4F20\u9012\u7ED9\u4E0B\u4E00\u5C42\u51FD\u6570\uFF0C\u5C31\u5FC5\u987B\u4F9D\u9760\u5B8C\u7F8E\u8F6C\u53D1\u3002<sup><a href="#ref-10">[10]</a></sup></p></li><li><p>\u90A3\u4E48\u300C<strong>\u4F7F\u7528\u5B8C\u7F8E\u8F6C\u53D1\u7684\u610F\u4E49</strong>\u300D\u5C31\u662F\u548C\u8BBE\u8BA1\u6A21\u5F0F\u76F8\u5173\u7684\u95EE\u9898\u4E86\u3002\u4F60\u53EF\u4EE5\u628A\u6240\u6709\u64CD\u4F5C\u5199\u5728\u4E00\u4E2A\u51FD\u6570\u91CC\uFF0C\u4E5F\u53EF\u4EE5\u5206\u6563\u5230\u591A\u4E2A\u51FD\u6570\u3002\u4F46\u53EA\u8981\u4F60\u5206\u6563\u4E86\uFF0C\u9047\u5230\u9700\u8981\u4F20\u9012\u901A\u7528\u5F15\u7528\u5230\u4E0B\u4E00\u5C42\u7684\u60C5\u51B5\u5C31\u662F\u96BE\u514D\u7684\u4E86\u3002<sup><a href="#ref-10">[10]</a></sup></p></li></ul><p>\u300C<strong>\u5B8C\u7F8E\u8F6C\u53D1</strong>\u300D\u57FA\u4E8E\u300C<strong>\u4E07\u80FD\u5F15\u7528</strong>\u300D\uFF0C\u300C<strong>\u5F15\u7528\u6298\u53E0</strong>\u300D\u4EE5\u53CA\u300C<strong><code>std::forward</code></strong>\u300D\u3002\u5B8C\u7F8E\u8F6C\u53D1\u673A\u5236\uFF0C\u662F\u4E3A\u4E86\u5C06\u5DE6\u503C\u548C\u53F3\u503C\u7EDF\u4E00\u5904\u7406\uFF0C\u8282\u7EA6\u4EE3\u7801\u91CF\uFF0C\u800C\u53EA\u6709\u4E07\u80FD\u5F15\u7528\u4F1A\u51FA\u73B0\u540C\u65F6\u63A5\u53D7\u5DE6\u503C\u548C\u53F3\u503C\u7684\u60C5\u51B5\uFF0C\u6240\u4EE5\u5B8C\u7F8E\u8F6C\u53D1\u53EA\u5B58\u5728\u4E8E\u4E07\u80FD\u5F15\u7528\u4E2D\u3002<sup><a href="#ref-11">[11]</a></sup></p><h2 id="\u5199\u4E2A\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u5199\u4E2A\u4EE3\u7801" aria-hidden="true">#</a> \u5199\u4E2A\u4EE3\u7801</h2><h3 id="\u4E00\u4E2A\u7C7B\u7684\u5B8C\u6574\u5199\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E2A\u7C7B\u7684\u5B8C\u6574\u5199\u6CD5" aria-hidden="true">#</a> \u4E00\u4E2A\u7C7B\u7684\u5B8C\u6574\u5199\u6CD5</h3><p>\u6211\u4EEC\u6765\u5199\u4E00\u4E2A <code>Buffer</code> \u7C7B\uFF0C\u7528\u4E8E\u63A5\u53D7\u5B57\u8282\u6D41\uFF0C\u5305\u542B\u300C<strong>\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</strong>\u300D\u3001\u300C<strong>\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\u3001\u300C<strong>\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\u3001\u300C<strong>\u79FB\u52A8\u6784\u9020\u51FD\u6570</strong>\u300D\u3001\u300C<strong>\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D\u3001\u300C<strong>\u6790\u6784\u51FD\u6570</strong>\u300D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Buffer</span><span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    size_t         capacity_<span class="token punctuation">;</span> <span class="token comment">// \u5BB9\u91CF</span>
    size_t         length_<span class="token punctuation">;</span>   <span class="token comment">// \u957F\u5EA6</span>
    std<span class="token double-colon punctuation">::</span>string    name_<span class="token punctuation">;</span>     <span class="token comment">// \u540D\u79F0</span>
    <span class="token comment">// \u8FD9\u91CC\u6709\u4E2A\u987A\u5E8F\u95EE\u9898\uFF0C\u521D\u59CB\u5316\u5217\u8868\u4E2D\u7684\u987A\u5E8F\u662F\u6309\u7167\u6210\u5458\u53D8\u91CF\u7684\u58F0\u660E\u987A\u5E8F\u6765\u7684</span>
    <span class="token comment">// \u56E0\u4E3A\u7528\u5230\u4E86 capacity_\uFF0C\u6240\u4EE5\u8981\u653E\u5728 capacity_ \u540E\u9762</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> pbuffer_<span class="token punctuation">;</span>  <span class="token comment">// \u6307\u9488</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">Buffer</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name <span class="token operator">=</span> <span class="token string">&quot;tempBuffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Buffer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Buffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    Buffer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    size_t <span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> length<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    size_t <span class="token function">GetCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> capacity<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">,</span> size_t length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> Buffer<span class="token operator">&amp;</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4E2D\uFF0C<code>capacity</code> \u662F buffer \u7684\u6700\u5927\u5BB9\u91CF\uFF0C<code>length</code> \u662F buffer \u7684\u5F53\u524D\u957F\u5EA6\uFF0C<code>buf</code> \u662Fbuffer \u6570\u7EC4\u7684\u6307\u9488</p><p>\u9ED8\u8BA4\u6784\u9020\u51FD\u6570\u662F\u4E00\u4E2A\u5355\u53C2\u6570\u7684\u6784\u9020\u51FD\u6570\uFF0C\u53EF\u4EE5\u901A\u8FC7 <code>explicit</code> \u5173\u952E\u5B57\u6765\u58F0\u660E\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u907F\u514D\u9690\u5F0F\u8F6C\u6362\uFF1B\u5E76\u4E14\u4F7F\u7528\u521D\u59CB\u5316\u5217\u8868\u6765\u521D\u59CB\u5316\u6210\u5458\u53D8\u91CF\uFF0C\u901A\u8FC7\u5C06\u53C2\u6570\u7684\u5185\u5B58\u7A7A\u95F4\u4E0E\u6210\u5458\u53D8\u91CF\u7684\u5185\u5B58\u7A7A\u95F4\u7ED1\u5B9A\uFF0C\u6784\u9020\u51FD\u6570\u5217\u8868\u521D\u59CB\u5316\u53EF\u4EE5\u76F4\u63A5\u5BF9\u6210\u5458\u53D8\u91CF\u8FDB\u884C\u521D\u59CB\u5316\uFF0C\u907F\u514D\u4E86\u989D\u5916\u7684\u8D4B\u503C\u64CD\u4F5C\uFF0C\u63D0\u9AD8\u4E86\u6548\u7387</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">Buffer</span><span class="token double-colon punctuation">::</span><span class="token function">Buffer</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">capacity_</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token function">pbuffer_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; [constructor] called: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6790\u6784\u51FD\u6570\u7528\u4E8E\u91CA\u653E\u8D44\u6E90\uFF0C\u8FD9\u91CC\u91CA\u653E\u4E86 <code>pbuffer_</code> \u7684\u5185\u5B58\u7A7A\u95F4</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">Buffer</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; [destructor] called: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pbuffer_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u300C<strong>\u62F7\u8D1D\u6784\u9020\u51FD\u6570</strong>\u300D\u4F7F\u7528 <code>std::copy</code> \u5C06 <code>other</code> \u7684\u6570\u7EC4\u62F7\u8D1D\u7ED9\u5F53\u524D\u5BF9\u8C61\uFF0C\u62F7\u8D1D\u8303\u56F4\u662F <code>other.pbuffer_</code> \u5230 <code>other.pbuffer_ + other.capacity_</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">Buffer</span><span class="token double-colon punctuation">::</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">capacity_</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>capacity_<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length_</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>length_<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name_<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">pbuffer_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">[</span>other<span class="token punctuation">.</span>capacity_<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; [copy constructor] called: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>pbuffer_<span class="token punctuation">,</span> other<span class="token punctuation">.</span>pbuffer_ <span class="token operator">+</span> other<span class="token punctuation">.</span>capacity_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>pbuffer_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u300C<strong>\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97</strong>\u300D\u9996\u5148\u8981\u68C0\u67E5\u662F\u5426\u4E3A\u81EA\u8D4B\u503C\uFF0C\u7136\u540E\u91CA\u653E\u65E7\u8D44\u6E90\uFF0C\u7136\u540E\u5C06\u65B0\u8D44\u6E90\u62F7\u8D1D\u7ED9\u5F53\u524D\u5BF9\u8C61\u3002\u8FD4\u56DE\u5F53\u524D\u5BF9\u8C61\u7684\u5F15\u7528 (\u901A\u5E38\u662F *this \u7684\u5F15\u7528)\uFF0C\u8FD9\u6837\u53EF\u4EE5\u5B9E\u73B0\u94FE\u5F0F\u8D4B\u503C\uFF0C\u4F8B\u5982 <code>a = b = c</code>\uFF0C\u8FD9\u91CC\u7684 <code>a</code>\u3001<code>b</code>\u3001<code>c</code> \u90FD\u662F <code>Buffer</code> \u7C7B\u578B\u7684\u5BF9\u8C61</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Buffer<span class="token operator">&amp;</span> Buffer<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[copy assignment operator] called: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>other <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token comment">// \u68C0\u67E5\u662F\u5426\u4E3A\u81EA\u8D4B\u503C</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// \u91CA\u653E\u65E7\u8D44\u6E90</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>pbuffer_<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token operator">-&gt;</span>capacity_ <span class="token operator">=</span> other<span class="token punctuation">.</span>capacity_<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>length_   <span class="token operator">=</span> other<span class="token punctuation">.</span>length_<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>name_     <span class="token operator">=</span> other<span class="token punctuation">.</span>name_<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>pbuffer_  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">[</span>other<span class="token punctuation">.</span>capacity_<span class="token punctuation">]</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>pbuffer_<span class="token punctuation">,</span> other<span class="token punctuation">.</span>pbuffer_ <span class="token operator">+</span> other<span class="token punctuation">.</span>capacity_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>pbuffer_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u300C<strong>\u79FB\u52A8\u6784\u9020\u51FD\u6570</strong>\u300D\u901A\u5E38\u7528\u4E8E\u521B\u5EFA\u65B0\u5BF9\u8C61\uFF0C\u56E0\u6B64\u4EFB\u52A1\u662F\u83B7\u53D6\u6E90\u5BF9\u8C61 <code>other</code> \u7684\u8D44\u6E90\uFF0C\u5E76\u786E\u4FDD\u6E90\u5BF9\u8C61 <code>other</code> \u4E0D\u518D\u62E5\u6709\u8FD9\u4E9B\u8D44\u6E90\u3002</p><p>\u9700\u8981\u989D\u5916\u8BF4\u660E\u7684\u662F\uFF0C\u5728\u79FB\u52A8\u6784\u9020\u4E2D\uFF0C\u9700\u8981\u4F7F\u7528 <code>noexcept</code> \u8BF4\u660E\u7B26\uFF0C\u544A\u77E5\u7F16\u8BD1\u5668\uFF0C\u6211\u4EEC\u7684\u79FB\u52A8\u6784\u9020\u51FD\u6570\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\uFF0C\u53EF\u4EE5\u653E\u5FC3\u4F7F\u7528\u3002\u4EE5\u4E0B\u662F\u4E3A\u4EC0\u4E48\u79FB\u52A8\u6784\u9020\u51FD\u6570\u548C\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u901A\u5E38\u4E0D\u5F15\u53D1\u5F02\u5E38\u7684\u539F\u56E0\uFF1A</p><ol><li>\u8D44\u6E90\u8F6C\u79FB\uFF1A\u79FB\u52A8\u6784\u9020\u51FD\u6570\u548C\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u7684\u4E3B\u8981\u76EE\u7684\u662F\u5C06\u8D44\u6E90\uFF08\u4F8B\u5982\u5185\u5B58\u3001\u6587\u4EF6\u53E5\u67C4\u7B49\uFF09\u4ECE\u4E00\u4E2A\u5BF9\u8C61\u8F6C\u79FB\u5230\u53E6\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u800C\u4E0D\u8FDB\u884C\u8D44\u6E90\u7684\u590D\u5236\u3002\u56E0\u6B64\uFF0C\u5B83\u4EEC\u7684\u64CD\u4F5C\u901A\u5E38\u662F\u76F8\u5BF9\u4F4E\u98CE\u9669\u7684\uFF0C\u4E0D\u592A\u53EF\u80FD\u5F15\u53D1\u5F02\u5E38\u3002</li><li>\u9884\u671F\u5B89\u5168\u6027\uFF1A\u79FB\u52A8\u8BED\u4E49\u88AB\u8BBE\u8BA1\u4E3A\u5728\u6B63\u5E38\u60C5\u51B5\u4E0B\u4E0D\u5F15\u53D1\u5F02\u5E38\u3002\u8FD9\u4F7F\u5F97\u5728\u79FB\u52A8\u8D44\u6E90\u65F6\u4E0D\u9700\u8981\u989D\u5916\u7684\u5F02\u5E38\u5904\u7406\u4EE3\u7801\uFF0C\u63D0\u9AD8\u4E86\u4EE3\u7801\u7684\u53EF\u8BFB\u6027\u548C\u6027\u80FD\u3002</li><li>\u6027\u80FD\u4F18\u5316\uFF1A\u7F16\u8BD1\u5668\u53EF\u4EE5\u6839\u636E noexcept \u4FE1\u606F\u6765\u8FDB\u884C\u6027\u80FD\u4F18\u5316\u3002\u5982\u679C\u4E00\u4E2A\u51FD\u6570\u58F0\u660E\u4E3A noexcept\uFF0C\u7F16\u8BD1\u5668\u53EF\u4EE5\u751F\u6210\u66F4\u9AD8\u6548\u7684\u4EE3\u7801\uFF0C\u56E0\u4E3A\u5B83\u77E5\u9053\u5728\u8BE5\u51FD\u6570\u4E2D\u4E0D\u4F1A\u5F15\u53D1\u5F02\u5E38\uFF0C\u4ECE\u800C\u53EF\u4EE5\u907F\u514D\u989D\u5916\u7684\u5F02\u5E38\u5904\u7406\u5F00\u9500\u3002</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token class-name">Buffer</span><span class="token double-colon punctuation">::</span><span class="token function">Buffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
    <span class="token operator">:</span> <span class="token function">capacity_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">length_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pbuffer_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u4F7F\u7528 std::move \u5C06\u8D44\u6E90\u4ECE other \u8F6C\u79FB\u7ED9\u5F53\u524D\u5BF9\u8C61</span>
    capacity_ <span class="token operator">=</span> other<span class="token punctuation">.</span>capacity_<span class="token punctuation">;</span>
    length_   <span class="token operator">=</span> other<span class="token punctuation">.</span>length_<span class="token punctuation">;</span>
    <span class="token comment">// name_     = std::move(other.name_); // \u8FD9\u91CC\u62A5\u9519\u4E86\uFF0C\u8BF4\u591A\u4E2A\u91CD\u8F7D\uFF0C\u4F46\u662F\u7F16\u8BD1\u6267\u884C\u901A\u8FC7\uFF0C</span>
    name_     <span class="token operator">=</span> other<span class="token punctuation">.</span>name_<span class="token punctuation">;</span>
    pbuffer_  <span class="token operator">=</span> other<span class="token punctuation">.</span>pbuffer_<span class="token punctuation">;</span>

    <span class="token comment">// \u6E05\u7A7A other \u7684\u8D44\u6E90</span>
    other<span class="token punctuation">.</span>capacity_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    other<span class="token punctuation">.</span>length_   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    other<span class="token punctuation">.</span>name_     <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    other<span class="token punctuation">.</span>pbuffer_  <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u300C<strong>\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>\u300D \u79FB\u7528\u4E8E\u5C06\u6E90\u5BF9\u8C61 <code>other</code> \u7684\u8D44\u6E90\u8F6C\u79FB\u5230\u5F53\u524D\u5BF9\u8C61\u4E0A\uFF0C\u800C\u5F53\u524D\u5BF9\u8C61\u5DF2\u7ECF\u5B58\u5728\u5E76\u4E14\u53EF\u80FD\u62E5\u6709\u81EA\u5DF1\u7684\u8D44\u6E90\u3002\u56E0\u6B64\uFF0C\u5728\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26\u4E2D\uFF0C\u901A\u5E38\u9700\u8981\u91CA\u653E\u5F53\u524D\u5BF9\u8C61\u7684\u8D44\u6E90\uFF0C\u4EE5\u786E\u4FDD\u5728\u8D44\u6E90\u8F6C\u79FB\u4E4B\u524D\u6E05\u7A7A\u5F53\u524D\u5BF9\u8C61\uFF0C\u907F\u514D\u8D44\u6E90\u6CC4\u6F0F\u548C\u8D44\u6E90\u7684\u91CD\u590D\u91CA\u653E\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Buffer<span class="token operator">&amp;</span> Buffer<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> <span class="token comment">// \u68C0\u67E5\u662F\u5426\u4E3A\u81EA\u8D4B\u503C</span>
        <span class="token comment">// \u91CA\u653E\u5F53\u524D\u5BF9\u8C61\u7684\u8D44\u6E90</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pbuffer_<span class="token punctuation">;</span>

        <span class="token comment">// \u4F7F\u7528 std::move \u5C06\u8D44\u6E90\u4ECE other \u8F6C\u79FB\u7ED9\u5F53\u524D\u5BF9\u8C61</span>
        capacity_ <span class="token operator">=</span> other<span class="token punctuation">.</span>capacity_<span class="token punctuation">;</span>
        length_   <span class="token operator">=</span> other<span class="token punctuation">.</span>length_<span class="token punctuation">;</span>
        <span class="token comment">// name_     = std::move(other.name_); // \u8FD9\u91CC\u62A5\u9519\u4E86\uFF0C\u8BF4\u591A\u4E2A\u91CD\u8F7D\uFF0C\u4F46\u662F\u7F16\u8BD1\u6267\u884C\u901A\u8FC7\uFF0C</span>
        name_     <span class="token operator">=</span> other<span class="token punctuation">.</span>name_<span class="token punctuation">;</span>
        pbuffer_  <span class="token operator">=</span> other<span class="token punctuation">.</span>pbuffer_<span class="token punctuation">;</span>

        <span class="token comment">/**
         * \u5077\u5B8C\u8D44\u6E90\u540E\uFF0C\u539F\u5BF9\u8C61\u7684\u8D44\u6E90\u5C31\u6CA1\u6709\u4E86\uFF0C\u6240\u4EE5\u8981\u628A\u539F\u5BF9\u8C61\u7684\u8D44\u6E90\u6E05\u7A7A
         * \u5C24\u5176\u662F\u6307\u9488
         */</span>
        other<span class="token punctuation">.</span>capacity_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        other<span class="token punctuation">.</span>length_   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        other<span class="token punctuation">.</span>name_     <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        other<span class="token punctuation">.</span>pbuffer_  <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7279\u522B\u7684\uFF0C\u5982\u679C\u5047\u8BBE <code>Buffer</code> \u7C7B\u4E0D\u9700\u8981\u8FD9\u4E9B\u9ED8\u8BA4\u51FD\u6570\uFF0C\u53EF\u4EE5\u5220\u9664\uFF0C\u5E76\u4E14\u53C2\u6570\u5217\u8868\u4E2D\u53EA\u9700\u8981\u58F0\u660E\u7C7B\u578B\u5373\u53EF</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Buffer</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u9ED8\u8BA4\u6784\u9020\u51FD\u6570</span>
    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u62F7\u8D1D\u6784\u9020\u51FD\u6570</span>
    Buffer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u62F7\u8D1D\u8D4B\u503C\u8FD0\u7B97\u7B26</span>
    <span class="token function">Buffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u79FB\u52A8\u6784\u9020\u51FD\u6570</span>
    Buffer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u79FB\u52A8\u8D4B\u503C\u8FD0\u7B97\u7B26</span>
    <span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// \u5220\u9664\u6790\u6784\u51FD\u6570</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2><ul><li><p><span id="ref-1"></span>[1] <a href="https://en.cppreference.com" target="_blank" rel="noopener noreferrer">cppreference.com</a></p></li><li><p><span id="ref-2"></span>[2] <a href="https://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c/" target="_blank" rel="noopener noreferrer">Understanding lvalues and rvalues in C and C++</a></p></li><li><p><span id="ref-3"></span>[3] <a href="https://changkun.de/modern-cpp/en-us/03-runtime/#3-3-rvalue-Reference" target="_blank" rel="noopener noreferrer">MODERN C++ TUTORIAL: C++ 11/14/17/20 ON THE FLY(SECOND EDITION) Changkun Ou</a></p></li><li><p><span id="ref-4"></span>[4] <a href="https://zhuanlan.zhihu.com/p/378951486" target="_blank" rel="noopener noreferrer">CPP \u590D\u5236\u6784\u9020\u51FD\u6570/\u8D4B\u503C\u8FD0\u7B97\u7B26\uFF1F\u50BB\u50BB\u5206\u4E0D\u6E05\u695A - \u77E5\u4E4E</a></p></li><li><p><span id="ref-5"></span>[5] <a href="https://blog.csdn.net/ganwenbo2011/article/details/100919900" target="_blank" rel="noopener noreferrer">\u4E3A\u4EC0\u4E48C++\u4E2D\u590D\u5236\u6784\u9020\u51FD\u6570\u53EF\u4EE5\u8BBF\u95EE\u53C2\u6570\u5BF9\u8C61\u7684\u79C1\u6709\u6210\u5458</a></p></li><li><p><span id="ref-6"></span>[6] <a href="https://zhuanlan.zhihu.com/p/455848360" target="_blank" rel="noopener noreferrer">\u5F18\u7AE3\uFF1A\u4E00\u6587\u5165\u9B42\uFF1A\u5988\u5988\u518D\u4E5F\u4E0D\u62C5\u5FC3\u6211\u4E0D\u61C2C++\u79FB\u52A8\u8BED\u4E49\u4E86 - \u77E5\u4E4E</a>\uFF1A\u8BB2\u5F97\u975E\u5E38\u8BE6\u7EC6\u7684\u6587\u7AE0\uFF0C\u63A8\u8350</p></li><li><p><span id="ref-7"></span>[7] <a href="https://zhuanlan.zhihu.com/p/435689642" target="_blank" rel="noopener noreferrer">auto&amp;&amp;\u3001\u4E07\u80FD\u5F15\u7528\u548C\u5B8C\u7F8E\u8F6C\u53D1 - \u77E5\u4E4E</a></p></li><li><p><span id="ref-8"></span>[8] <a href="https://zhuanlan.zhihu.com/p/435605194" target="_blank" rel="noopener noreferrer">\u5982\u4F55\u786E\u5B9A\u8868\u8FBE\u5F0F\u7684\u503C\u7C7B\u578B\uFF1F - \u77E5\u4E4E</a></p></li><li><p><span id="ref-9"></span>[9] <a href="https://www.zhihu.com/question/40346748" target="_blank" rel="noopener noreferrer">\u5982\u4F55\u7406\u89E3c++\u4E2D\u7684\u5F15\u7528\u6298\u53E0? - \u77E5\u4E4E</a></p></li><li><p><span id="ref-10"></span>[10] <a href="https://www.zhihu.com/question/348291815" target="_blank" rel="noopener noreferrer">C++\u5B8C\u7F8E\u8F6C\u53D1\u662F\u5426\u662F\u591A\u6B64\u4E00\u4E3E? - \u77E5\u4E4E</a></p></li><li><p><span id="ref-11"></span>[11] <a href="https://zhuanlan.zhihu.com/p/369203981" target="_blank" rel="noopener noreferrer">\u8C08\u8C08\u5B8C\u7F8E\u8F6C\u53D1(Perfect Forwarding)\uFF1A\u5B8C\u7F8E\u8F6C\u53D1 = \u5F15\u7528\u6298\u53E0 + \u4E07\u80FD\u5F15\u7528 + std::forward - \u77E5\u4E4E</a></p></li><li><p><span id="ref-12"></span>[12] <a href="https://zhuanlan.zhihu.com/p/374392832" target="_blank" rel="noopener noreferrer">\u4EC0\u4E48\u662Fmove\uFF1F\u7406\u89E3C++ Value categories\uFF0Cmove\uFF0C move in Rust - CrackingOysters\u7684\u6587\u7AE0 - \u77E5\u4E4E</a></p></li><li><p><span id="ref"></span><a href="https://www.zhihu.com/question/567388005" target="_blank" rel="noopener noreferrer">\u4E3A\u4EC0\u4E48\u5FEB2023\u5E74\u4E86\u4E09\u5927\u7F16\u8BD1\u5668\u5382\u5546\u8FD8\u6CA1\u5B8C\u6210c++20\u7684\u6240\u6709\u65B0\u7279\u6027? - \u77E5\u4E4E</a></p></li></ul>`,156),c=[o];function l(u,i){return s(),a("div",null,c)}var d=n(e,[["render",l],["__file","rvalue.html.vue"]]);export{d as default};
