import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.bdxXucLJ.js";const u=JSON.parse('{"title":"内网穿透","description":"","frontmatter":{"title":"内网穿透","subtitle":"使用 frp 进行内网穿透","author":"HenryZhu","date":"2023-02-23T00:00:00.000Z","useHeaderImage":true,"headerImage":"/images/backgrounds/5.jpg","headerMask":"rgb(0,0,0, .5)","tags":["linux"]},"headers":[],"relativePath":"program/linux/frp/frp.md","filePath":"program/linux/frp/frp.md","lastUpdated":1715326410000}'),n={name:"program/linux/frp/frp.md"},t=e(`<h1 id="使用-frp-进行内网穿透" tabindex="-1">使用 frp 进行内网穿透 <a class="header-anchor" href="#使用-frp-进行内网穿透" aria-label="Permalink to &quot;使用 frp 进行内网穿透&quot;">​</a></h1><p>内网穿透 (Intranet penetration)</p><h2 id="下载软件" tabindex="-1">下载软件 <a class="header-anchor" href="#下载软件" aria-label="Permalink to &quot;下载软件&quot;">​</a></h2><p>在 <a href="https://github.com/fatedier/frp" target="_blank" rel="noreferrer">Github</a> 的 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noreferrer">Release</a> 页面中下载到最新版本的客户端和服务端二进制文件，所有文件被打包在一个压缩包中</p><h2 id="常用参数" tabindex="-1">常用参数 <a class="header-anchor" href="#常用参数" aria-label="Permalink to &quot;常用参数&quot;">​</a></h2><h2 id="基于-ssh-部署" tabindex="-1">基于 ssh 部署 <a class="header-anchor" href="#基于-ssh-部署" aria-label="Permalink to &quot;基于 ssh 部署&quot;">​</a></h2><p>参考 <a href="https://gofrp.org/docs/" target="_blank" rel="noreferrer">文档</a> 进行配置和部署</p><p>解压缩下载的压缩包，将其中的 frpc 拷贝到内网服务所在的机器上，将 frps 拷贝到具有公网 IP 的机器上，放置在任意目录。</p><h3 id="配置服务端" tabindex="-1">配置服务端 <a class="header-anchor" href="#配置服务端" aria-label="Permalink to &quot;配置服务端&quot;">​</a></h3><ol><li>这个示例通过简单配置 TCP 类型的代理让用户访问到内网的服务器。 在具有公网 IP 的机器上部署 frps，修改 frps.ini 文件，这里使用了最简化的配置，设置了 frp 服务器用户接收客户端连接的端口：</li></ol><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[common]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bind_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 7000</span></span></code></pre></div><p><code>bind_port</code> 是绑定的端口号，</p><ul><li>端口可以自定义，但是需要客户端和服务端进行统一。</li><li>服务器需要在esc管理中配置安全组规则中暴露该端口</li></ul><p>先启动服务端(具有公网 IP 的机器)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./frps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./frps.ini</span></span></code></pre></div><h3 id="配置客户端" tabindex="-1">配置客户端 <a class="header-anchor" href="#配置客户端" aria-label="Permalink to &quot;配置客户端&quot;">​</a></h3><ol start="2"><li>在需要被访问的内网机器上（SSH 服务通常监听在 22 端口）部署 frpc，修改 <code>frpc.ini</code> 文件，假设 frps 所在服务器的公网 IP 为 <code>x.x.x.x</code>：</li></ol><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[common]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = x.x.x.x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 7000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[ssh]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = tcp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local_ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 22</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 6000</span></span></code></pre></div><p><code>local_ip</code> 和 <code>local_port</code> 配置为本地需要暴露到公网的服务地址和端口。</p><p><code>remote_port</code> 表示在 frp 服务端监听的端口，访问此端口的流量将会被转发到本地服务对应的端口。</p><p>(先启动服务端，再) 启动客户端(需要被访问的内网机器)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./frpc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./frpc.ini</span></span></code></pre></div><h3 id="多个客户端的配置" tabindex="-1">多个客户端的配置 <a class="header-anchor" href="#多个客户端的配置" aria-label="Permalink to &quot;多个客户端的配置&quot;">​</a></h3><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[common]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = x.x.x.x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 7000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[ssh001]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 唯一 不可重复</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = tcp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local_ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 22</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">remote_port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 6001  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 唯一 不可重复</span></span></code></pre></div><h3 id="ssh-远程访问" tabindex="-1">ssh 远程访问 <a class="header-anchor" href="#ssh-远程访问" aria-label="Permalink to &quot;ssh 远程访问&quot;">​</a></h3><p>如果需要在后台长期运行，建议结合其他工具使用，例如 systemd 和 supervisor。</p><p>通过 SSH 访问内网机器，假设用户名为 test：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oPort=6000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test@x.x.x.x</span></span></code></pre></div><p>frp 会将请求 <code>x.x.x.x:6000</code> 的流量转发到内网机器的 22 端口。</p>`,29),p=[t];function l(h,r,o,k,d,c){return i(),a("div",null,p)}const y=s(n,[["render",l]]);export{u as __pageData,y as default};
