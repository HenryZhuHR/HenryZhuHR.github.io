import{_ as n,o as s,c as a,b as p}from"./app.6a7e2086.js";const t={},e=p(`<h1 id="\u6A21\u677F\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u6A21\u677F\u7F16\u7A0B" aria-hidden="true">#</a> \u6A21\u677F\u7F16\u7A0B</h1><h2 id="\u53EF\u53D8\u53C2\u6570\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#\u53EF\u53D8\u53C2\u6570\u6A21\u677F" aria-hidden="true">#</a> \u53EF\u53D8\u53C2\u6570\u6A21\u677F</h2><p>\u53EF\u53D8\u53C2\u6570\u6A21\u677F (variadic templates)</p><h3 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> \u5B9A\u4E49</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// function </span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u6837\u6211\u4EEC\u5C31\u5B9A\u4E49\u4E86\u4E00\u4E2A\u53EF\u4EE5\u8F93\u5165\u4EFB\u610F\u7C7B\u578B\u4EFB\u610F\u4E2A\u6570\u7684\u53D8\u91CF\u505A\u4E3A\u51FD\u6570 <code>Func</code> \u7684\u5B9E\u53C2\u3002</p><p>\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 <code>sizeof...(args)</code> \u6765\u83B7\u53D6\u8F93\u5165\u53C2\u6570\u7684\u4E2A\u6570\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 1</span>
    <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 2</span>
    <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3</span>
    <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53C2\u6570\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#\u53C2\u6570\u89E3\u6790" aria-hidden="true">#</a> \u53C2\u6570\u89E3\u6790</h3><h4 id="\u5FAA\u73AF\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#\u5FAA\u73AF\u89E3\u6790" aria-hidden="true">#</a> \u5FAA\u73AF\u89E3\u6790</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> T<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">ParsebyFor</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> <span class="token punctuation">{</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// handle here</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ParsebyFor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>
    <span class="token function">ParsebyFor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// error: deduced conflicting types (&#39;int&#39; vs &#39;double&#39;) for initializer list element type</span>
    <span class="token function">ParsebyFor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// error: deduced conflicting types (&#39;int&#39; vs &#39;const char *&#39;) for initializer list element type</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u9012\u5F52\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u89E3\u6790" aria-hidden="true">#</a> \u9012\u5F52\u89E3\u6790</h4><p>\u9012\u5F52\u7684\u65B9\u5F0F\u89E3\u6790\u53C2\u6570\uFF0C\u9700\u8981\u5B9A\u4E49\uFF1A</p><ul><li><strong>\u7EC8\u6B62\u9012\u5F52\u7684\u57FA\u672C\u51FD\u6570</strong>: \u5F53\u9012\u5F52\u89E3\u6790\u81F3\u53C2\u6570\u53EA\u6709\u4E00\u4E2A\u7684\u65F6\u5019\u8C03\u7528\u5355\u53C2\u6570\u51FD\u6570 <code>void func(T arg)</code></li><li><strong>\u53EF\u53D8\u53C2\u6570\u51FD\u6570\u6A21\u677F</strong>: \u9012\u5F52\u8C03\u7528 <code>void func(T arg,Ts ... args)</code> \u76F4\u5230\u53EA\u5269\u6700\u540E\u4E00\u4E2A\u53C2\u6570\u7684\u65F6\u5019\uFF0C\u8C03\u7528\u7EC8\u6B62\u9012\u5F52\u7684\u57FA\u672C\u51FD\u6570</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u5904\u7406\u6BCF\u4E00\u4E2A(\u4E0D\u540C\u7C7B\u578B)\u53C2\u6570\u7684\u51FD\u6570</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">handleValue</span><span class="token punctuation">(</span>Type value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u7EC8\u6B62\u9012\u5F52\u7684\u57FA\u672C\u51FD\u6570</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span>T arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">handleValue</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u53EF\u53D8\u53C2\u6570\u51FD\u6570\u6A21\u677F</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span>T arg<span class="token punctuation">,</span>Ts <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">handleValue</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u56E0\u4E3A\u5B9A\u4E49\u7684\u5904\u7406\u53C2\u6570\u7684\u51FD\u6570\u662F\u4E00\u4E2A\u51FD\u6570\u6A21\u677F <code>handleValue</code> \uFF0C\u56E0\u6B64\u80FD\u591F\u5904\u7406\u4E0D\u540C\u7C7B\u578B\u7684\u53D8\u91CF\uFF0C\u8C03\u7528\u540E\u53EF\u4EE5\u5F97\u5230</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 6 9 </span>
    <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1 str</span>
    <span class="token function">ParsebyRecursion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1 2 3.14 </span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> Print</h3><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2><ul><li><a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener noreferrer">Parameter pack(since C++11)</a></li><li><a href="https://www.cnblogs.com/delmory/p/3910874.html" target="_blank" rel="noopener noreferrer">C\u51FD\u6570\u4E2D\u4F7F\u7528\u53EF\u53D8\u53C2\u6570</a></li></ul>`,20),o=[e];function c(l,u){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","template.html.vue"]]);export{r as default};
