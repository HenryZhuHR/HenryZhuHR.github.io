import{_ as n,o as s,c as a,a as p}from"./app.2f7bd735.js";const t={},e=p(`<h1 id="lambda-\u8868\u8FBE\u5F0F\u4E0E\u51FD\u6570\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#lambda-\u8868\u8FBE\u5F0F\u4E0E\u51FD\u6570\u6A21\u677F" aria-hidden="true">#</a> Lambda \u8868\u8FBE\u5F0F\u4E0E\u51FD\u6570\u6A21\u677F</h1><h2 id="lambda-\u8868\u8FBE\u5F0F" tabindex="-1"><a class="header-anchor" href="#lambda-\u8868\u8FBE\u5F0F" aria-hidden="true">#</a> Lambda \u8868\u8FBE\u5F0F</h2><h3 id="\u57FA\u672C\u8BED\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u8BED\u6CD5" aria-hidden="true">#</a> \u57FA\u672C\u8BED\u6CD5</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token punctuation">[</span>\u6355\u83B7\u5217\u8868<span class="token punctuation">]</span><span class="token punctuation">(</span>\u51FD\u6570\u53C2\u6570\u5217\u8868<span class="token punctuation">)</span> <span class="token keyword">mutable</span><span class="token punctuation">(</span>\u53EF\u9009<span class="token punctuation">)</span> \u5F02\u5E38\u5C5E\u6027 <span class="token operator">-&gt;</span> \u8FD4\u56DE\u7C7B\u578B <span class="token punctuation">{</span>
    <span class="token comment">// \u51FD\u6570\u4F53</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lambda \u5728\u6CA1\u6709\u6355\u83B7\u53D8\u91CF\u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u7406\u89E3\u4E3A\u4E00\u4E2A\u666E\u901A\u51FD\u6570\u6307\u9488\uFF0C\u4F8B\u5982\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// lambda \u8868\u8FBE\u5F0F</span>
<span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lambda \u8868\u8FBE\u5F0F\u7684\u8FD4\u56DE\u53C2\u6570\u7C7B\u578B\u4F1A\u81EA\u52A8\u63A8\u5BFC\uFF0C\u56E0\u6B64\u8FD4\u56DE\u7C7B\u578B\u53EF\u4EE5\u7701\u7565\uFF1B\u540C\u65F6\uFF0C(\u4E60\u60EF\u4E0A) \u7528 <code>auto</code> \u6765\u7B80\u5316\u4EE3\u7801</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Lambda \u8868\u8FBE\u5F0F\u662F\u4E00\u79CD\u8BED\u6CD5\u7CD6\uFF0C\u53EF\u4EE5\u5C06\u4EE3\u7801\u8FDB\u884C\u7B80\u5316\uFF0C\u4F8B\u5982\u4E00\u4E2A\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">Increase3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Increase3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u6355\u83B7\u5217\u8868\u4E0D\u4E3A <code>[]</code> \u4E3A\u7A7A\u7684\u65F6\u5019\uFF0C\u6709\u51E0\u79CD\u6355\u83B7\u65B9\u5F0F</p><h3 id="\u6355\u83B7\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u6355\u83B7\u65B9\u5F0F" aria-hidden="true">#</a> \u6355\u83B7\u65B9\u5F0F</h3><h4 id="\u503C\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u503C\u6355\u83B7" aria-hidden="true">#</a> \u503C\u6355\u83B7</h4><p>\u6355\u83B7\u5217\u8868\u7684\u53D8\u91CF\uFF08\u9700\u8981\u53EF\u4EE5\u62F7\u8D1D\uFF09\u5728 Lambda \u8868\u8FBE\u5F0F\u521B\u5EFA\u65F6\u62F7\u8D1D\uFF0C\u800C\u4E0D\u662F\u5728\u8C03\u7528\u7684\u65F6\u5019\u62F7\u8D1D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                       <span class="token comment">// local : 0x16d36b22c</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// lambda: 0x16d36b228</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
val<span class="token punctuation">;</span>    <span class="token comment">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u91CD\u65B0\u8D4B\u503C <code>val=10;</code> \u4E4B\u540E\uFF0C Lambda \u8868\u8FBE\u5F0F\u5185\u7684 <code>val</code> \u4ECD\u7136 <code>3</code></p><p>\u8FD9\u8BF4\u660E\uFF0C\u5728 Lambda \u8868\u8FBE\u5F0F\u521B\u5EFA\u7684\u65F6\u5019\uFF0C\u6355\u83B7\u5217\u8868\u53C2\u6570 <code>val</code> \u7684\u503C\u5C31\u88AB\u62F7\u8D1D\u4E86\u4E00\u4EFD\uFF0C\u8FD9\u548C\u51FD\u6570\u5728\u6309\u503C\u4F20\u9012\u53C2\u6570\u65F6\u7684\u7684\u5C40\u90E8\u53D8\u91CF\u662F\u4E00\u6837\u7684</p><h4 id="\u5F15\u7528\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u6355\u83B7" aria-hidden="true">#</a> \u5F15\u7528\u6355\u83B7</h4><p>\u5728\u6355\u83B7\u5217\u8868\u7684\u53D8\u91CF\u524D\u52A0\u4E0A <code>&amp;</code> \u65F6\uFF0C\u4F20\u9012\u7684\u662F\u53D8\u91CF\u5F15\u7528</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                       <span class="token comment">// local : 0x16da6722c</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>val<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// lambda: 0x16da6722c</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   
val<span class="token punctuation">;</span>    <span class="token comment">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u9690\u5F0F\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u9690\u5F0F\u6355\u83B7" aria-hidden="true">#</a> \u9690\u5F0F\u6355\u83B7</h4><p>\u524D\u9762\u7684\u4E24\u79CD\u65B9\u5F0F\u9700\u8981\u624B\u52A8\u6307\u5B9A\u6355\u83B7\u53C2\u6570\uFF0C\u5982\u679C\u5E0C\u671B\u53EF\u4EE5\u6355\u6349\u5230\u5C40\u90E8\u8303\u56F4\u5185\u53D8\u91CF\uFF0C\u53EF\u4EE5\u7528 <code>=</code> / <code>&amp;</code> \u6765\u7B80\u5316</p><ul><li><code>[]</code> \u7A7A\u6355\u83B7\u5217\u8868</li><li><code>[param1, &amp;param, ...]</code> \u6307\u5B9A\u53C2\u6570\u6355\u83B7</li><li><code>[=]</code> \u503C\u6355\u83B7</li><li><code>[&amp;]</code> \u5F15\u7528\u6355\u83B7</li><li>\u7EC4\u5408 <ul><li><code>[=, &amp;a, &amp;b]</code> \u8868\u793A\u5916\u90E8\u53D8\u91CF\u4EC5 <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539</li><li><code>[&amp;, a, b]</code> \u8868\u793A\u5916\u90E8\u53D8\u91CF\u9664\u4E86 <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539\uFF0C\u5176\u4F59\u4E0D\u53EF\u4EE5\u4FEE\u6539</li><li>\u4E0D\u53EF\u4EE5\u6DF7\u5408\u4F7F\u7528\uFF0C\u4F8B\u5982 <code>[=, &amp;a, b]</code></li></ul></li></ul><p>\u7A7A\u6355\u83B7\u5217\u8868</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6307\u5B9A\u53C2\u6570\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">]</span> <span class="token punctuation">{</span> a<span class="token operator">++</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a = 1, b =3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u503C\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> val<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// val = 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F15\u7528\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> val<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// val = 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7EC4\u5408</p><p>\u4EC5\u53D8\u91CF <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539\uFF1B\u53D8\u91CF <code>c</code> \u4E0D\u53EF\u4EE5\u4FEE\u6539\uFF0C\u4F46\u662F\u53EF\u4EE5\u8BBF\u95EE</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
    b <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token comment">// c++; // error: value c can&#39;t be changed</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a=4 b=9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7528\u6CD5" aria-hidden="true">#</a> \u7528\u6CD5</h3><h3 id="\u4E0E-for-each-\u4E00\u8D77\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4E0E-for-each-\u4E00\u8D77\u4F7F\u7528" aria-hidden="true">#</a> \u4E0E for_each \u4E00\u8D77\u4F7F\u7528</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr = [2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-function" tabindex="-1"><a class="header-anchor" href="#std-function" aria-hidden="true">#</a> std::function</h2><p>\u51FD\u6570(\u53EF\u8C03\u7528\u5BF9\u8C61)\u5B9A\u4E49\u65B9\u5F0F:</p><ol><li><strong>\u4F7F\u7528\u51FD\u6570\u6307\u9488</strong></li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u4E00\u4E2A\u51FD\u6570\u6307\u9488\u7684\u58F0\u660E</span>
    Func func <span class="token operator">=</span> add<span class="token punctuation">;</span>         <span class="token comment">// func \u662F\u7C7B\u578B\u4E3A Func \u7684\u51FD\u6570</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>typedef int (*Func)(int, int)</code> \u8868\u793A <code>Func</code> \u7C7B\u578B\u662F\u6307\u5411\u8FD4\u56DE <code>int</code> \u7684\u53C2\u6570\u4E3A <code>(int, int)</code> \u7684\u51FD\u6570\u6307\u9488\uFF0C\u56E0\u4E3A\u4E00\u4E2A\u51FD\u6570\u540D\u4E0D\u662F\u5176\u7C7B\u578B\u7684\u4E00\u90E8\u5206\u51FD\u6570\u7684\u7C7B\u578B\u53EA\u7531\u5B83\u7684\u8FD4\u56DE\u503C\u548C\u53C2\u6570\u8868\u51B3\u5B9A</p></blockquote><ol start="2"><li><strong>\u4F7F\u7528\u7ED3\u6784\u4F53</strong></li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">function_object</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    function_object ft<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">ft</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>lambda \u8868\u8FBE\u5F0F</strong></li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u8C03\u7528\u65B9\u5F0F\u90FD\u76F8\u540C <code>int(int, int)</code> \uFF0C\u5728 C++11 \u4E2D\u5F15\u5165\u7684 <code>std::function</code> \u6765\u7EDF\u4E00\u4E0A\u8FF0\u51FD\u6570\u7684\u4F7F\u7528\u65B9\u5F0F</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> fun_cxx11 <span class="token operator">=</span> add<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">fun_cxx11</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++11 \u7C7B\u6A21\u677F <code>std::function</code> \u662F\u4E00\u4E2A\u901A\u7528\u7684\u591A\u6001\u51FD\u6570\u5305\u88C5\u5668\u3002\u5728\u6E90\u7801(Apple Clang 14.0)\u4E2D\u7684\u5B9A\u4E49\u5982\u4E0B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_Rp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>_ArgTypes<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">_LIBCPP_TEMPLATE_VIS</span> function<span class="token operator">&lt;</span><span class="token function">_Rp</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
    <span class="token operator">:</span> <span class="token keyword">public</span> __function<span class="token double-colon punctuation">::</span>__maybe_derive_from_unary_function<span class="token operator">&lt;</span><span class="token function">_Rp</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
      <span class="token keyword">public</span> __function<span class="token double-colon punctuation">::</span>__maybe_derive_from_binary_function<span class="token operator">&lt;</span><span class="token function">_Rp</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">typedef</span> _Rp result_type<span class="token punctuation">;</span>
    <span class="token comment">// function invocation:</span>
    _Rp <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ArgTypes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>std::function</code> \u7684\u5B9E\u4F8B\u53EF\u4EE5<strong>\u5B58\u50A8\uFF0C\u590D\u5236\u548C\u8C03\u7528\u4EFB\u4F55\u53EF\u8C03\u7528\u7684\u76EE\u6807</strong>\uFF0C\u5305\u62EC\u51FD\u6570\uFF0Clambda\u8868\u8FBE\u5F0F\uFF0C\u7ED1\u5B9A\u8868\u8FBE\u5F0F\u6216\u5176\u4ED6\u51FD\u6570\u5BF9\u8C61\uFF0C\u4EE5\u53CA\u6307\u5411\u6210\u5458\u51FD\u6570\u548C\u6307\u5411\u6570\u636E\u6210\u5458\u7684\u6307\u9488\u3002\u5F53<code>std::function</code> \u5BF9\u8C61\u672A\u5305\u88F9\u4EFB\u4F55\u5B9E\u9645\u7684\u53EF\u8C03\u7528\u5143\u7D20\uFF0C\u8C03\u7528\u8BE5 <code>std::function</code> \u5BF9\u8C61\u5C06\u629B\u51FA <code>std::bad_function_call</code> \u5F02\u5E38\u3002</li><li><code>std::function</code> \u662F\u4E00\u4E2A<strong>\u53EF\u8C03\u7528\u5BF9\u8C61\u5305\u88C5\u5668\uFF0C\u662F\u4E00\u4E2A\u7C7B\u6A21\u677F</strong>\uFF0C\u53EF\u4EE5\u5BB9\u7EB3\u9664\u4E86\u7C7B\u6210\u5458\u51FD\u6570\u6307\u9488\u4E4B\u5916\u7684\u6240\u6709\u53EF\u8C03\u7528\u5BF9\u8C61\uFF0C\u5B83\u53EF\u4EE5\u7528\u7EDF\u4E00\u7684\u65B9\u5F0F\u5904\u7406\u51FD\u6570\u3001\u51FD\u6570\u5BF9\u8C61\u3001\u51FD\u6570\u6307\u9488\uFF0C\u5E76\u5141\u8BB8\u4FDD\u5B58\u548C\u5EF6\u8FDF\u5B83\u4EEC\u7684\u6267\u884C\u3002</li><li><code>std::function</code> \u53EF\u4EE5<strong>\u53D6\u4EE3\u51FD\u6570\u6307\u9488</strong>\u7684\u4F5C\u7528\uFF0C\u56E0\u4E3A\u5B83\u53EF\u4EE5\u5EF6\u8FDF\u51FD\u6570\u7684\u6267\u884C\uFF0C\u7279\u522B\u9002\u5408\u4F5C\u4E3A\u56DE\u8C03\u51FD\u6570\u4F7F\u7528\u3002\u5B83\u6BD4\u666E\u901A\u51FD\u6570\u6307\u9488\u66F4\u52A0\u7684\u7075\u6D3B\u548C\u4FBF\u5229\u3002</li></ol><h2 id="\u95ED\u5305" tabindex="-1"><a class="header-anchor" href="#\u95ED\u5305" aria-hidden="true">#</a> \u95ED\u5305</h2><p>\u4E5F\u662F\u88C5\u9970\u5668</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">using</span> FUNC_TYPE <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">func_decorator</span><span class="token punctuation">(</span>FUNC_TYPE func<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;start func:&quot;</span> <span class="token operator">&lt;&lt;</span> func <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;end   func:&quot;</span> <span class="token operator">&lt;&lt;</span> func <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">func_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-bind" tabindex="-1"><a class="header-anchor" href="#std-bind" aria-hidden="true">#</a> std::bind</h2><p><code>std::bind</code> \u662F\u4E00\u4E2A\u51FD\u6570\u6A21\u677F\uFF0C\u7528\u4E8E\u521B\u5EFA\u51FD\u6570\u5BF9\u8C61\uFF0C\u5C06\u53C2\u6570\u7ED1\u5B9A\u5230\u51FD\u6570\u4E2D\uFF0C\u4E5F\u79F0\u4E3A\u7ED1\u5B9A\u5668\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> func <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8C03\u7528 func\uFF0C\u5B9E\u9645\u4E0A\u8C03\u7528 foo(1, 2, 3)</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4E2D <code>std::placeholders::_1</code> \u8868\u793A\u5360\u4F4D\u7B26\uFF0C\u8868\u793A\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF0C\u4E5F\u5C31\u662F <code>3</code></p><p><code>std::placeholders</code> \u662F\u5360\u4F4D\u7B26\uFF0C\u7528\u4E8E\u5360\u4F4D\uFF0C\u8868\u793A\u53C2\u6570\u7684\u4F4D\u7F6E\uFF0C\u5176\u5B9E\u5C31\u662F\u4E00\u4E2A\u7ED3\u6784\u4F53\uFF0Cclang \u4E2D\u5B9A\u4E49\u5982\u4E0B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">namespace</span> placeholders
<span class="token punctuation">{</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> _Np<span class="token operator">&gt;</span> <span class="token keyword">struct</span> <span class="token class-name">__ph</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span>   _1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span>   _2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">&gt;</span>   _3<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">&gt;</span>   _4<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">5</span><span class="token operator">&gt;</span>   _5<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">6</span><span class="token operator">&gt;</span>   _6<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">7</span><span class="token operator">&gt;</span>   _7<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">&gt;</span>   _8<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">&gt;</span>   _9<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/* inline */</span> <span class="token keyword">constexpr</span> __ph<span class="token operator">&lt;</span><span class="token number">10</span><span class="token operator">&gt;</span> _10<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// namespace placeholders</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2><ul><li><a href="https://blog.csdn.net/qq_35721743/article/details/83217416" target="_blank" rel="noopener noreferrer">C++11 function\u7C7B\u6A21\u677F</a></li><li><a href="https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp" target="_blank" rel="noopener noreferrer">Lambda expressions in C++ | Microsoft Learn</a></li></ul>`,64),o=[e];function c(l,u){return s(),a("div",null,o)}var k=n(t,[["render",c],["__file","lambda.html.vue"]]);export{k as default};
